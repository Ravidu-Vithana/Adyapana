/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import com.formdev.flatlaf.FlatDarkLaf;
import java.awt.CardLayout;
import java.awt.Color;
import static java.awt.event.ItemEvent.SELECTED;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.Year;
import java.util.Date;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Classes;
import model.MySQL;
import model.Student;
import model.Subject;
import model.Teacher;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author User
 */
public class Home extends javax.swing.JFrame {

    public static final String DARKCOLOUR = "#3c3f41";
    public static final int REGISTRATION = 0;
    public static final int VIEW = 1;
    public static final int studentDetails = 1;
    public static final int studentFilters = 2;
    public static final int teacherDetails = 3;
    public static final int teacherFilters = 4;
    public static final int subjectDetails = 5;
    public static final int classDetails = 6;
    public static final int classFilters = 7;

    private static final String ALLSTUDENTS = "SELECT * FROM `student`";
    private static final String ALLTEACHERS = "SELECT * FROM `teacher`";
    private static final String ALLSUBJECTS = "SELECT * FROM `subject`";
    private static final String ALLCLASSES = "SELECT * FROM `class`";
    private static final String ALLSTUDENTENROLMENTS = "SELECT * FROM `student_enrolment`";
    private static final String ALLPAYMENTS = "SELECT * FROM `invoice`";

    private static final String NEWSTUDENTS = "SELECT * FROM `student` WHERE `joined_date` = '" + todayDate() + "'";
    private static final String NEWTEACHERS = "SELECT * FROM `teacher` WHERE `joined_date` = '" + todayDate() + "'";
    private static final String NEWSUBJECTS = "SELECT * FROM `subject` WHERE `added_date` = '" + todayDate() + "'";
    private static final String NEWCLASSES = "SELECT * FROM `class` WHERE `date_added` = '" + todayDate() + "'";

    private static final String ACTIVE = "`status` = '1'";

    private static final String STUDENTDUELIST = "1";
    private static final String CLASSDUELIST = "2";

    private static final String PRESENT = "1";
    private static final String ABSENT = "0";

    public static HashMap<String, Student> studentMap = new HashMap<>();
    public static HashMap<String, Teacher> teacherMap = new HashMap<>();
    public static HashMap<String, Subject> subjectMap = new HashMap<>();
    public static HashMap<String, Classes> classMap = new HashMap<>();

    public static HashMap<String, String> cityMap = new HashMap<>();
    public static HashMap<String, String> districtMap = new HashMap<>();

    public static HashMap<String, String> subjectListMap = new HashMap<>();
    public static HashMap<String, String> teacherListMap = new HashMap<>();
    public static HashMap<String, String> timeslotMap = new HashMap<>();
    public static HashMap<String, String> dayMap = new HashMap<>();
    public static HashMap<String, String> monthMap = new HashMap<>();

    private HashMap<String, Vector> lastPaidMap = new HashMap<>();

    /**
     * Creates new form Home
     */
    public Home() {
        initComponents();
        loadCity();
        loadDistrict();

        storeAllStudents();
        storeAllTeachers();
        storeAllSubjects();
        storeAllClasses();

        loadStudents(ALLSTUDENTS + " WHERE " + ACTIVE, VIEW);
        loadTeachers(ALLTEACHERS + " WHERE " + ACTIVE, VIEW);
        loadSubjects(ALLSUBJECTS + " WHERE " + ACTIVE, VIEW);
        loadClasses(ALLCLASSES + " WHERE " + ACTIVE, VIEW);
        loadClassComboBoxes();
        loadStudentEnrolments(ALLSTUDENTENROLMENTS);
        loadPayments(ALLPAYMENTS);

        loadStudentFilters();
        loadTeacherClassFilters();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPanel2 = new javax.swing.JPanel();
        teacherLabel = new javax.swing.JLabel();
        subjectLabel = new javax.swing.JLabel();
        classLabel = new javax.swing.JLabel();
        studentLabel = new javax.swing.JLabel();
        viewPanel = new javax.swing.JPanel();
        studentsPanel = new javax.swing.JPanel();
        jLabel38 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jLabel42 = new javax.swing.JLabel();
        jTextField16 = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        jTextField17 = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        jTextField18 = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        jTextField19 = new javax.swing.JTextField();
        jLabel46 = new javax.swing.JLabel();
        jTextField20 = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        jTextField21 = new javax.swing.JTextField();
        jLabel48 = new javax.swing.JLabel();
        jComboBox9 = new javax.swing.JComboBox<>();
        jLabel49 = new javax.swing.JLabel();
        jComboBox10 = new javax.swing.JComboBox<>();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jComboBox11 = new javax.swing.JComboBox<>();
        jLabel56 = new javax.swing.JLabel();
        jTextField22 = new javax.swing.JTextField();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jLabel71 = new javax.swing.JLabel();
        jTextField33 = new javax.swing.JTextField();
        jButton19 = new javax.swing.JButton();
        jLabel88 = new javax.swing.JLabel();
        jTextField41 = new javax.swing.JTextField();
        jLabel62 = new javax.swing.JLabel();
        jLabel89 = new javax.swing.JLabel();
        jButton29 = new javax.swing.JButton();
        teachersPanel = new javax.swing.JPanel();
        jLabel39 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        jTextField25 = new javax.swing.JTextField();
        jLabel60 = new javax.swing.JLabel();
        jTextField26 = new javax.swing.JTextField();
        jLabel61 = new javax.swing.JLabel();
        jTextField27 = new javax.swing.JTextField();
        jLabel63 = new javax.swing.JLabel();
        jTextField29 = new javax.swing.JTextField();
        jLabel64 = new javax.swing.JLabel();
        jTextField30 = new javax.swing.JTextField();
        jLabel65 = new javax.swing.JLabel();
        jTextField31 = new javax.swing.JTextField();
        jLabel66 = new javax.swing.JLabel();
        jTextField32 = new javax.swing.JTextField();
        jLabel67 = new javax.swing.JLabel();
        jComboBox14 = new javax.swing.JComboBox<>();
        jLabel68 = new javax.swing.JLabel();
        jComboBox15 = new javax.swing.JComboBox<>();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        jLabel54 = new javax.swing.JLabel();
        jLabel72 = new javax.swing.JLabel();
        jTextField34 = new javax.swing.JTextField();
        jLabel73 = new javax.swing.JLabel();
        jComboBox12 = new javax.swing.JComboBox<>();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        jLabel90 = new javax.swing.JLabel();
        jLabel91 = new javax.swing.JLabel();
        subjectsPanel = new javax.swing.JPanel();
        jLabel40 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable7 = new javax.swing.JTable();
        jLabel74 = new javax.swing.JLabel();
        jTextField35 = new javax.swing.JTextField();
        jLabel75 = new javax.swing.JLabel();
        jTextField36 = new javax.swing.JTextField();
        jButton18 = new javax.swing.JButton();
        jButton21 = new javax.swing.JButton();
        classesPanel = new javax.swing.JPanel();
        jLabel41 = new javax.swing.JLabel();
        jLabel80 = new javax.swing.JLabel();
        jComboBox16 = new javax.swing.JComboBox<>();
        jLabel81 = new javax.swing.JLabel();
        jComboBox17 = new javax.swing.JComboBox<>();
        jLabel82 = new javax.swing.JLabel();
        jComboBox18 = new javax.swing.JComboBox<>();
        jLabel83 = new javax.swing.JLabel();
        jButton22 = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTable8 = new javax.swing.JTable();
        jLabel84 = new javax.swing.JLabel();
        jLabel85 = new javax.swing.JLabel();
        jTextField40 = new javax.swing.JTextField();
        jLabel86 = new javax.swing.JLabel();
        jComboBox21 = new javax.swing.JComboBox<>();
        jButton24 = new javax.swing.JButton();
        jLabel93 = new javax.swing.JLabel();
        jTextField42 = new javax.swing.JTextField();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox9 = new javax.swing.JCheckBox();
        jCheckBox10 = new javax.swing.JCheckBox();
        jCheckBox11 = new javax.swing.JCheckBox();
        jCheckBox12 = new javax.swing.JCheckBox();
        jCheckBox13 = new javax.swing.JCheckBox();
        jCheckBox14 = new javax.swing.JCheckBox();
        studentRegistrationPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jTextField7 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel57 = new javax.swing.JLabel();
        jTextField23 = new javax.swing.JTextField();
        jLabel87 = new javax.swing.JLabel();
        jTextField37 = new javax.swing.JTextField();
        teacherRegistrationPanel = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField10 = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        jComboBox3 = new javax.swing.JComboBox<>();
        jComboBox4 = new javax.swing.JComboBox<>();
        jLabel27 = new javax.swing.JLabel();
        jTextField13 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel58 = new javax.swing.JLabel();
        jTextField24 = new javax.swing.JTextField();
        subjectRegistrationPanel = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jTextField14 = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        jTextField15 = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        classRegistrationPanel = new javax.swing.JPanel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jComboBox5 = new javax.swing.JComboBox<>();
        jLabel35 = new javax.swing.JLabel();
        jComboBox6 = new javax.swing.JComboBox<>();
        jLabel36 = new javax.swing.JLabel();
        jComboBox7 = new javax.swing.JComboBox<>();
        jLabel37 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        studentEnrollmentPanel = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jLabel76 = new javax.swing.JLabel();
        jTextField28 = new javax.swing.JTextField();
        jLabel77 = new javax.swing.JLabel();
        jTextField38 = new javax.swing.JTextField();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTable9 = new javax.swing.JTable();
        jButton17 = new javax.swing.JButton();
        jButton25 = new javax.swing.JButton();
        attendancePanel = new javax.swing.JPanel();
        jLabel95 = new javax.swing.JLabel();
        jLabel96 = new javax.swing.JLabel();
        jTextField44 = new javax.swing.JTextField();
        jLabel97 = new javax.swing.JLabel();
        jTextField45 = new javax.swing.JTextField();
        jButton26 = new javax.swing.JButton();
        jButton27 = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTable11 = new javax.swing.JTable();
        jLabel101 = new javax.swing.JLabel();
        jTextField47 = new javax.swing.JTextField();
        paymentPanel = new javax.swing.JPanel();
        jLabel98 = new javax.swing.JLabel();
        jLabel78 = new javax.swing.JLabel();
        jTextField39 = new javax.swing.JTextField();
        jLabel79 = new javax.swing.JLabel();
        jTextField43 = new javax.swing.JTextField();
        jLabel94 = new javax.swing.JLabel();
        jComboBox23 = new javax.swing.JComboBox<>();
        jLabel99 = new javax.swing.JLabel();
        jComboBox24 = new javax.swing.JComboBox<>();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTable10 = new javax.swing.JTable();
        jButton28 = new javax.swing.JButton();
        jLabel100 = new javax.swing.JLabel();
        jTextField46 = new javax.swing.JTextField();
        jButton30 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Home - Adyapana Institute");

        jPanel2.setBackground(new java.awt.Color(106, 107, 107));

        teacherLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        teacherLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        teacherLabel.setText("Teachers");
        teacherLabel.setEnabled(false);
        teacherLabel.setOpaque(true);
        teacherLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                teacherLabelMouseClicked(evt);
            }
        });

        subjectLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        subjectLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        subjectLabel.setText("Subjects");
        subjectLabel.setEnabled(false);
        subjectLabel.setOpaque(true);
        subjectLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                subjectLabelMouseClicked(evt);
            }
        });

        classLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        classLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        classLabel.setText("Classes");
        classLabel.setEnabled(false);
        classLabel.setOpaque(true);
        classLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                classLabelMouseClicked(evt);
            }
        });

        studentLabel.setBackground(new java.awt.Color(60, 98, 145));
        studentLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        studentLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        studentLabel.setText("Students");
        studentLabel.setEnabled(false);
        studentLabel.setOpaque(true);
        studentLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                studentLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(teacherLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(subjectLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addComponent(classLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addComponent(studentLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(studentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(teacherLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(subjectLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(classLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(127, 127, 127))
        );

        viewPanel.setLayout(new java.awt.CardLayout());

        jLabel38.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel38.setText("Students");

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Mobile", "Date of Birth", "Number of Classes"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable5.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable5MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTable5MouseEntered(evt);
            }
        });
        jScrollPane5.setViewportView(jTable5);
        if (jTable5.getColumnModel().getColumnCount() > 0) {
            jTable5.getColumnModel().getColumn(3).setHeaderValue("Date of Birth");
            jTable5.getColumnModel().getColumn(4).setHeaderValue("Number of Classes");
        }

        jLabel42.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel42.setText("First Name :");

        jLabel43.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel43.setText("Last Name :");

        jLabel44.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel44.setText("Date of Birth :");

        jLabel45.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel45.setText("Mobile :");

        jLabel46.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel46.setText("Line 1 :");

        jLabel47.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel47.setText("Line 2 :");

        jLabel48.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel48.setText("City :");

        jComboBox9.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        jLabel49.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel49.setText("District :");

        jComboBox10.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        jLabel52.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel52.setText("Filter By :");

        jLabel53.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel53.setText("Class ID :");

        jComboBox11.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        jComboBox11.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox11ItemStateChanged(evt);
            }
        });

        jLabel56.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel56.setText("Initials :");

        jButton12.setText("Reset");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setText("Save");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jLabel71.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel71.setText("Name :");

        jTextField33.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField33KeyReleased(evt);
            }
        });

        jButton19.setText("Delete");
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        jLabel88.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel88.setText("Email :");

        jTextField41.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField41ActionPerformed(evt);
            }
        });

        jLabel62.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel62.setText("Joined Date :");

        jLabel89.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel89.setText(" ");

        jButton29.setText("Load Due List");
        jButton29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton29ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout studentsPanelLayout = new javax.swing.GroupLayout(studentsPanel);
        studentsPanel.setLayout(studentsPanelLayout);
        studentsPanelLayout.setHorizontalGroup(
            studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentsPanelLayout.createSequentialGroup()
                .addGroup(studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(studentsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel52)
                        .addGap(18, 18, 18)
                        .addComponent(jButton12))
                    .addGroup(studentsPanelLayout.createSequentialGroup()
                        .addGap(298, 298, 298)
                        .addComponent(jLabel38)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(studentsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(studentsPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane5)
                        .addContainerGap())
                    .addGroup(studentsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel71)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField33, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel53, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100)
                        .addComponent(jButton29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, studentsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel56)
                        .addGap(42, 42, 42)
                        .addComponent(jTextField22, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel62)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel89, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(193, 193, 193))
                    .addGroup(studentsPanelLayout.createSequentialGroup()
                        .addGroup(studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(studentsPanelLayout.createSequentialGroup()
                                .addGroup(studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel42)
                                    .addComponent(jLabel43))
                                .addGap(21, 21, 21)
                                .addGroup(studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(studentsPanelLayout.createSequentialGroup()
                                .addGroup(studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel49)
                                    .addComponent(jLabel48, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(40, 40, 40)
                                .addGroup(studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBox10, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField20, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBox9, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField21, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(studentsPanelLayout.createSequentialGroup()
                                .addGroup(studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel45)
                                    .addComponent(jLabel44)
                                    .addComponent(jLabel88))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField18, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField19, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField41))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                        .addComponent(jButton19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))))
        );
        studentsPanelLayout.setVerticalGroup(
            studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel38)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel52)
                    .addComponent(jButton12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel53)
                    .addComponent(jComboBox11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel71)
                    .addComponent(jTextField33, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton29))
                .addGap(13, 13, 13)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(studentsPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton13)
                            .addComponent(jButton19))
                        .addContainerGap())
                    .addGroup(studentsPanelLayout.createSequentialGroup()
                        .addGroup(studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel56)
                            .addComponent(jTextField22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel62)
                            .addComponent(jLabel89, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel42)
                            .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel43)
                            .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel44)
                            .addComponent(jTextField18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel45)
                            .addComponent(jTextField19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addGroup(studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel88)
                            .addComponent(jTextField41, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(studentsPanelLayout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jLabel46)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel47))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, studentsPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jTextField20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jComboBox9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel48))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(studentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel49)
                            .addComponent(jComboBox10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40))))
        );

        viewPanel.add(studentsPanel, "studentsPanel");

        jLabel39.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel39.setText("Teachers");

        jLabel59.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel59.setText("Initials :");

        jTextField25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField25ActionPerformed(evt);
            }
        });

        jLabel60.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel60.setText("First Name :");

        jLabel61.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel61.setText("Last Name :");

        jLabel63.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel63.setText("Mobile :");

        jLabel64.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel64.setText("Email :");

        jLabel65.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel65.setText("Line 1 :");

        jLabel66.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel66.setText("Line 2 :");

        jLabel67.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel67.setText("City :");

        jComboBox14.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        jLabel68.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel68.setText("District :");

        jComboBox15.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Mobile", "Total Classes", "Number of Subjects"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable6.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable6MouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(jTable6);

        jLabel54.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel54.setText("Filter By :");

        jLabel72.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel72.setText("Name :");

        jTextField34.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField34KeyReleased(evt);
            }
        });

        jLabel73.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel73.setText("Subject :");

        jComboBox12.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        jComboBox12.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox12ItemStateChanged(evt);
            }
        });

        jButton15.setText("Reset");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton16.setText("Save");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton20.setText("Delete");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });

        jLabel90.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel90.setText("Joined Date :");

        jLabel91.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel91.setText(" ");

        javax.swing.GroupLayout teachersPanelLayout = new javax.swing.GroupLayout(teachersPanel);
        teachersPanel.setLayout(teachersPanelLayout);
        teachersPanelLayout.setHorizontalGroup(
            teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teachersPanelLayout.createSequentialGroup()
                .addGroup(teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(teachersPanelLayout.createSequentialGroup()
                        .addGap(302, 302, 302)
                        .addComponent(jLabel39))
                    .addGroup(teachersPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(teachersPanelLayout.createSequentialGroup()
                                .addComponent(jLabel54)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton15)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(teachersPanelLayout.createSequentialGroup()
                                .addComponent(jLabel72)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField34, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(jLabel73, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBox12, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
            .addGroup(teachersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(teachersPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane6)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, teachersPanelLayout.createSequentialGroup()
                        .addGroup(teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(teachersPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButton20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(teachersPanelLayout.createSequentialGroup()
                                .addGroup(teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(teachersPanelLayout.createSequentialGroup()
                                        .addGroup(teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel63)
                                            .addComponent(jLabel64))
                                        .addGap(44, 44, 44)
                                        .addGroup(teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField29, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextField30, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(teachersPanelLayout.createSequentialGroup()
                                        .addGroup(teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, teachersPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel59)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jTextField25, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, teachersPanelLayout.createSequentialGroup()
                                                .addGroup(teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel60)
                                                    .addComponent(jLabel61))
                                                .addGap(21, 21, 21)
                                                .addGroup(teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jTextField26, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jTextField27, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGap(32, 32, 32)
                                        .addComponent(jLabel90)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel91, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(teachersPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel65, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(38, 38, 38)
                                        .addComponent(jTextField31, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(teachersPanelLayout.createSequentialGroup()
                                        .addGroup(teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel66, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                                            .addComponent(jLabel67, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE))
                                        .addGap(38, 38, 38)
                                        .addGroup(teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextField32, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jComboBox14, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(146, 146, 146)))
                        .addGap(32, 32, 32))
                    .addGroup(teachersPanelLayout.createSequentialGroup()
                        .addComponent(jLabel68, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jComboBox15, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(153, 448, Short.MAX_VALUE))))
        );
        teachersPanelLayout.setVerticalGroup(
            teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teachersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel39)
                .addGap(7, 7, 7)
                .addGroup(teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel54)
                    .addComponent(jButton15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel72)
                    .addComponent(jTextField34, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel73)
                    .addComponent(jComboBox12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel90)
                        .addComponent(jLabel91, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel59)
                        .addComponent(jTextField25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel60)
                    .addComponent(jTextField26, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel61)
                    .addComponent(jTextField27, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel63)
                    .addComponent(jTextField29, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel64)
                    .addComponent(jTextField30, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel65)
                    .addComponent(jTextField31, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel66)
                    .addComponent(jTextField32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel67)
                    .addComponent(jComboBox14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel68)
                    .addComponent(jComboBox15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(teachersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton16)
                    .addComponent(jButton20))
                .addContainerGap())
        );

        viewPanel.add(teachersPanel, "teachersPanel");

        jLabel40.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel40.setText("Subjects");

        jTable7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Subject ID", "Subject Name", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable7.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable7MouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(jTable7);

        jLabel74.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel74.setText("Subject Name :");

        jLabel75.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel75.setText("Price :");

        jButton18.setText("Save");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jButton21.setText("Delete");
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout subjectsPanelLayout = new javax.swing.GroupLayout(subjectsPanel);
        subjectsPanel.setLayout(subjectsPanelLayout);
        subjectsPanelLayout.setHorizontalGroup(
            subjectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subjectsPanelLayout.createSequentialGroup()
                .addGroup(subjectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(subjectsPanelLayout.createSequentialGroup()
                        .addGroup(subjectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(subjectsPanelLayout.createSequentialGroup()
                                .addGap(302, 302, 302)
                                .addComponent(jLabel40))
                            .addGroup(subjectsPanelLayout.createSequentialGroup()
                                .addGap(184, 184, 184)
                                .addComponent(jLabel74)
                                .addGap(36, 36, 36)
                                .addComponent(jTextField35, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subjectsPanelLayout.createSequentialGroup()
                                .addGap(66, 66, 66)
                                .addGroup(subjectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subjectsPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel75)
                                        .addGap(36, 36, 36)
                                        .addComponent(jTextField36, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subjectsPanelLayout.createSequentialGroup()
                                        .addComponent(jButton21)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 223, Short.MAX_VALUE))
                    .addGroup(subjectsPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane7)))
                .addContainerGap())
        );
        subjectsPanelLayout.setVerticalGroup(
            subjectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subjectsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel40)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addGroup(subjectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel74)
                    .addComponent(jTextField35, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(subjectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel75)
                    .addComponent(jTextField36, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(subjectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton18)
                    .addComponent(jButton21))
                .addContainerGap(152, Short.MAX_VALUE))
        );

        viewPanel.add(subjectsPanel, "subjectsPanel");

        jLabel41.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel41.setText("Classes");

        jLabel80.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel80.setText("Select Subject* :");

        jComboBox16.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        jLabel81.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel81.setText("Select Teacher* :");

        jComboBox17.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        jLabel82.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel82.setText("Select Timeslot* :");

        jComboBox18.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        jLabel83.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel83.setText("Select Day* :");

        jButton22.setText("Reset");
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton22ActionPerformed(evt);
            }
        });

        jButton23.setText("Save");
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });

        jTable8.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Class ID", "Subject Name", "Teacher ID", "Time Slot", "Day(s)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable8.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable8MouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(jTable8);

        jLabel84.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel84.setText("Filter By :");

        jLabel85.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel85.setText("Class ID :");

        jTextField40.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField40KeyReleased(evt);
            }
        });

        jLabel86.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel86.setText("Subject Name :");

        jComboBox21.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        jComboBox21.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox21ItemStateChanged(evt);
            }
        });

        jButton24.setText("Delete");
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });

        jLabel93.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel93.setText("Teacher ID :");

        jTextField42.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField42KeyReleased(evt);
            }
        });

        jCheckBox8.setText("Monday");

        jCheckBox9.setText("Tuesday");

        jCheckBox10.setText("Wednesday");

        jCheckBox11.setText("Thursday");

        jCheckBox12.setText("Friday");

        jCheckBox13.setText("Saturday");

        jCheckBox14.setText("Sunday");

        javax.swing.GroupLayout classesPanelLayout = new javax.swing.GroupLayout(classesPanel);
        classesPanel.setLayout(classesPanelLayout);
        classesPanelLayout.setHorizontalGroup(
            classesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(classesPanelLayout.createSequentialGroup()
                .addGap(302, 302, 302)
                .addComponent(jLabel41)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(classesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(classesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8)
                    .addGroup(classesPanelLayout.createSequentialGroup()
                        .addComponent(jLabel84)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton22)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(classesPanelLayout.createSequentialGroup()
                        .addComponent(jLabel85)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField40, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel93)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField42, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel86)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox21, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, classesPanelLayout.createSequentialGroup()
                .addContainerGap(124, Short.MAX_VALUE)
                .addGroup(classesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, classesPanelLayout.createSequentialGroup()
                        .addGroup(classesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel80)
                            .addComponent(jLabel81)
                            .addComponent(jLabel82))
                        .addGap(40, 40, 40)
                        .addGroup(classesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox18, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox17, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox16, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(classesPanelLayout.createSequentialGroup()
                                .addComponent(jButton24)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton23, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(73, 73, 73))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, classesPanelLayout.createSequentialGroup()
                        .addComponent(jLabel83)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBox8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox14)
                        .addGap(19, 19, 19))))
        );
        classesPanelLayout.setVerticalGroup(
            classesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(classesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel41)
                .addGap(2, 2, 2)
                .addGroup(classesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel84)
                    .addComponent(jButton22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(classesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(classesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel93)
                        .addComponent(jTextField42, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(classesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel85)
                        .addComponent(jTextField40, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel86)
                        .addComponent(jComboBox21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(classesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel80)
                    .addComponent(jComboBox16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(classesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel81)
                    .addComponent(jComboBox17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(classesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel82)
                    .addComponent(jComboBox18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(classesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(classesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jCheckBox8)
                        .addComponent(jCheckBox9)
                        .addComponent(jCheckBox10)
                        .addComponent(jCheckBox11)
                        .addComponent(jCheckBox12)
                        .addComponent(jCheckBox13)
                        .addComponent(jCheckBox14))
                    .addComponent(jLabel83))
                .addGap(12, 12, 12)
                .addGroup(classesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton23)
                    .addComponent(jButton24))
                .addContainerGap(114, Short.MAX_VALUE))
        );

        viewPanel.add(classesPanel, "classesPanel");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("First Name* :");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel4.setText("Student Registration");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Last Name* :");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Date of Birth* :");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Mobile* :");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Personal Details");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Address Details");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("Line 1* :");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setText("Line 2 :");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setText("City* :");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel13.setText("District* :");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        jButton2.setText("Save");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Reset");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student ID", "Name", "Mobile"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setEnabled(false);
        jScrollPane1.setViewportView(jTable1);

        jLabel57.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel57.setText("Initials :");

        jLabel87.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel87.setText("Email :");

        jTextField37.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField37ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout studentRegistrationPanelLayout = new javax.swing.GroupLayout(studentRegistrationPanel);
        studentRegistrationPanel.setLayout(studentRegistrationPanelLayout);
        studentRegistrationPanelLayout.setHorizontalGroup(
            studentRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentRegistrationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(studentRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(studentRegistrationPanelLayout.createSequentialGroup()
                        .addGroup(studentRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(studentRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel8)
                                .addGroup(studentRegistrationPanelLayout.createSequentialGroup()
                                    .addGroup(studentRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel5))
                                    .addGap(36, 36, 36)
                                    .addGroup(studentRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(studentRegistrationPanelLayout.createSequentialGroup()
                                    .addGroup(studentRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addGap(18, 18, 18)
                                    .addGroup(studentRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField37, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(studentRegistrationPanelLayout.createSequentialGroup()
                                    .addComponent(jLabel57)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTextField23, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel87))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addGroup(studentRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, studentRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel9)
                                .addGroup(studentRegistrationPanelLayout.createSequentialGroup()
                                    .addComponent(jLabel13)
                                    .addGap(38, 38, 38)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(studentRegistrationPanelLayout.createSequentialGroup()
                                    .addGroup(studentRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(44, 44, 44)
                                    .addGroup(studentRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField6)))
                                .addGroup(studentRegistrationPanelLayout.createSequentialGroup()
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(44, 44, 44)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, studentRegistrationPanelLayout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(studentRegistrationPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(275, 275, 275)))
                .addContainerGap())
        );
        studentRegistrationPanelLayout.setVerticalGroup(
            studentRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentRegistrationPanelLayout.createSequentialGroup()
                .addGroup(studentRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(studentRegistrationPanelLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addGroup(studentRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel57)
                            .addComponent(jTextField23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(studentRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(studentRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(studentRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(studentRegistrationPanelLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addGroup(studentRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(studentRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(studentRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(studentRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(studentRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(studentRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel87)
                    .addComponent(jTextField37, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
                .addContainerGap())
        );

        viewPanel.add(studentRegistrationPanel, "studentRegistrationPanel");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel16.setText("Teacher Registration");

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel17.setText("Personal Details");

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel18.setText("First Name* :");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel19.setText("Last Name* :");

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel21.setText("Mobile* :");

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel22.setText("Address Details");

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel23.setText("Line 1* :");

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel24.setText("Line 2 :");

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel25.setText("City* :");

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel26.setText("District* :");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel27.setText("Email :");

        jButton5.setText("Reset");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Save");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Teacher ID", "Name", "Mobile"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setEnabled(false);
        jScrollPane2.setViewportView(jTable2);

        jLabel58.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel58.setText("Initials :");

        jTextField24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField24ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout teacherRegistrationPanelLayout = new javax.swing.GroupLayout(teacherRegistrationPanel);
        teacherRegistrationPanel.setLayout(teacherRegistrationPanelLayout);
        teacherRegistrationPanelLayout.setHorizontalGroup(
            teacherRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teacherRegistrationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(teacherRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(teacherRegistrationPanelLayout.createSequentialGroup()
                        .addGroup(teacherRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21)
                            .addComponent(jLabel27))
                        .addGap(58, 58, 58)
                        .addGroup(teacherRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(teacherRegistrationPanelLayout.createSequentialGroup()
                        .addGroup(teacherRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, teacherRegistrationPanelLayout.createSequentialGroup()
                                .addGroup(teacherRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel17)
                                    .addGroup(teacherRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, teacherRegistrationPanelLayout.createSequentialGroup()
                                            .addComponent(jLabel58)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jTextField24, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, teacherRegistrationPanelLayout.createSequentialGroup()
                                            .addGroup(teacherRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel18)
                                                .addComponent(jLabel19))
                                            .addGap(36, 36, 36)
                                            .addGroup(teacherRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                                .addGroup(teacherRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(teacherRegistrationPanelLayout.createSequentialGroup()
                                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(teacherRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel22)
                                        .addGroup(teacherRegistrationPanelLayout.createSequentialGroup()
                                            .addGroup(teacherRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(44, 44, 44)
                                            .addGroup(teacherRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jTextField12)))
                                        .addGroup(teacherRegistrationPanelLayout.createSequentialGroup()
                                            .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(29, 29, 29)
                                            .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(teacherRegistrationPanelLayout.createSequentialGroup()
                                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(44, 44, 44)
                                            .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addContainerGap())))
            .addGroup(teacherRegistrationPanelLayout.createSequentialGroup()
                .addGap(258, 258, 258)
                .addComponent(jLabel16)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        teacherRegistrationPanelLayout.setVerticalGroup(
            teacherRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teacherRegistrationPanelLayout.createSequentialGroup()
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(teacherRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(teacherRegistrationPanelLayout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addGap(15, 15, 15)
                        .addGroup(teacherRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel58)
                            .addComponent(jTextField24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(teacherRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(teacherRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(teacherRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21)
                            .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(teacherRegistrationPanelLayout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(teacherRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel23)
                            .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(teacherRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24)
                            .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(teacherRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel25)
                            .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(teacherRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel26)
                            .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(teacherRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(teacherRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                .addContainerGap())
        );

        viewPanel.add(teacherRegistrationPanel, "teacherRegistrationPanel");

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel30.setText("Subject Registration");

        jLabel31.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel31.setText("Subject Name* :");

        jLabel32.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel32.setText("Price* :");

        jButton7.setText("Reset");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Save");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Subject ID", "Subject Name", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.setEnabled(false);
        jScrollPane3.setViewportView(jTable3);

        javax.swing.GroupLayout subjectRegistrationPanelLayout = new javax.swing.GroupLayout(subjectRegistrationPanel);
        subjectRegistrationPanel.setLayout(subjectRegistrationPanelLayout);
        subjectRegistrationPanelLayout.setHorizontalGroup(
            subjectRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subjectRegistrationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(subjectRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(subjectRegistrationPanelLayout.createSequentialGroup()
                        .addGap(0, 227, Short.MAX_VALUE)
                        .addGroup(subjectRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(subjectRegistrationPanelLayout.createSequentialGroup()
                                .addComponent(jLabel31)
                                .addGap(36, 36, 36)
                                .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(subjectRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(subjectRegistrationPanelLayout.createSequentialGroup()
                                    .addComponent(jButton7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(subjectRegistrationPanelLayout.createSequentialGroup()
                                    .addComponent(jLabel32)
                                    .addGap(36, 36, 36)
                                    .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(172, 172, 172))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subjectRegistrationPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane3)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subjectRegistrationPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel30)
                .addGap(262, 262, 262))
        );
        subjectRegistrationPanelLayout.setVerticalGroup(
            subjectRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subjectRegistrationPanelLayout.createSequentialGroup()
                .addComponent(jLabel30)
                .addGap(61, 61, 61)
                .addGroup(subjectRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(subjectRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(subjectRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7)
                    .addComponent(jButton8))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                .addContainerGap())
        );

        viewPanel.add(subjectRegistrationPanel, "subjectRegistrationPanel");

        jLabel33.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel33.setText("Class Registration");

        jLabel34.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel34.setText("Select Subject* :");

        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        jLabel35.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel35.setText("Select Teacher* :");

        jComboBox6.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        jLabel36.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel36.setText("Select Timeslot* :");

        jComboBox7.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        jLabel37.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel37.setText("Select Day* :");

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Class ID", "Subject Name", "Teacher ID", "Time Slot", "Day(s)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable4.setEnabled(false);
        jScrollPane4.setViewportView(jTable4);

        jButton9.setText("Reset");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Save");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Monday");

        jCheckBox2.setText("Tuesday");

        jCheckBox3.setText("Wednesday");

        jCheckBox4.setText("Thursday");

        jCheckBox5.setText("Friday");

        jCheckBox6.setText("Saturday");

        jCheckBox7.setText("Sunday");

        javax.swing.GroupLayout classRegistrationPanelLayout = new javax.swing.GroupLayout(classRegistrationPanel);
        classRegistrationPanel.setLayout(classRegistrationPanelLayout);
        classRegistrationPanelLayout.setHorizontalGroup(
            classRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(classRegistrationPanelLayout.createSequentialGroup()
                .addGroup(classRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(classRegistrationPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4))
                    .addGroup(classRegistrationPanelLayout.createSequentialGroup()
                        .addGroup(classRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(classRegistrationPanelLayout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addGroup(classRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(classRegistrationPanelLayout.createSequentialGroup()
                                        .addGroup(classRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel34)
                                            .addComponent(jLabel35)
                                            .addComponent(jLabel36))
                                        .addGap(40, 40, 40)
                                        .addGroup(classRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(classRegistrationPanelLayout.createSequentialGroup()
                                                .addComponent(jButton9)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(classRegistrationPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel37)
                                        .addGap(18, 18, 18)
                                        .addComponent(jCheckBox1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jCheckBox2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jCheckBox3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jCheckBox4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jCheckBox5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jCheckBox6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jCheckBox7))))
                            .addGroup(classRegistrationPanelLayout.createSequentialGroup()
                                .addGap(270, 270, 270)
                                .addComponent(jLabel33)))
                        .addGap(0, 55, Short.MAX_VALUE)))
                .addContainerGap())
        );
        classRegistrationPanelLayout.setVerticalGroup(
            classRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(classRegistrationPanelLayout.createSequentialGroup()
                .addComponent(jLabel33)
                .addGap(49, 49, 49)
                .addGroup(classRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(classRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(classRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(classRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox4)
                    .addComponent(jCheckBox5)
                    .addComponent(jCheckBox6)
                    .addComponent(jCheckBox7))
                .addGap(18, 18, 18)
                .addGroup(classRegistrationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton9)
                    .addComponent(jButton10))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                .addContainerGap())
        );

        viewPanel.add(classRegistrationPanel, "classRegistrationPanel");

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel20.setText("Student Enrolment");

        jLabel76.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel76.setText("Student ID :");

        jLabel77.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel77.setText("Class ID :");

        jTextField38.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField38ActionPerformed(evt);
            }
        });

        jTable9.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Enrolment ID", "Student ID", "Class ID"
            }
        ));
        jScrollPane9.setViewportView(jTable9);
        if (jTable9.getColumnModel().getColumnCount() > 0) {
            jTable9.getColumnModel().getColumn(0).setHeaderValue("Enrolment ID");
        }

        jButton17.setText("Enroll");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jButton25.setText("Remove");
        jButton25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton25ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout studentEnrollmentPanelLayout = new javax.swing.GroupLayout(studentEnrollmentPanel);
        studentEnrollmentPanel.setLayout(studentEnrollmentPanelLayout);
        studentEnrollmentPanelLayout.setHorizontalGroup(
            studentEnrollmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentEnrollmentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(studentEnrollmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(studentEnrollmentPanelLayout.createSequentialGroup()
                        .addGap(0, 205, Short.MAX_VALUE)
                        .addGroup(studentEnrollmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, studentEnrollmentPanelLayout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addGap(288, 288, 288))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, studentEnrollmentPanelLayout.createSequentialGroup()
                                .addGroup(studentEnrollmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(studentEnrollmentPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel76)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextField28, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(studentEnrollmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(studentEnrollmentPanelLayout.createSequentialGroup()
                                            .addComponent(jButton25)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jButton17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, studentEnrollmentPanelLayout.createSequentialGroup()
                                            .addComponent(jLabel77)
                                            .addGap(18, 18, 18)
                                            .addComponent(jTextField38, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(235, 235, 235))))
                    .addComponent(jScrollPane9)))
        );
        studentEnrollmentPanelLayout.setVerticalGroup(
            studentEnrollmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentEnrollmentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel20)
                .addGap(45, 45, 45)
                .addGroup(studentEnrollmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel76)
                    .addComponent(jTextField28, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(studentEnrollmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel77)
                    .addComponent(jTextField38, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(studentEnrollmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton17)
                    .addComponent(jButton25))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(90, Short.MAX_VALUE))
        );

        viewPanel.add(studentEnrollmentPanel, "studentEnrollmentPanel");

        jLabel95.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel95.setText("Attendance");

        jLabel96.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel96.setText("Student ID :");

        jLabel97.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel97.setText("Class ID :");

        jTextField45.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField45ActionPerformed(evt);
            }
        });

        jButton26.setText("Present");
        jButton26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton26ActionPerformed(evt);
            }
        });

        jButton27.setText("Absent");
        jButton27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton27ActionPerformed(evt);
            }
        });

        jTable11.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student ID", "Class ID", "Status", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane11.setViewportView(jTable11);

        jLabel101.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel101.setText("Date :");

        jTextField47.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField47ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout attendancePanelLayout = new javax.swing.GroupLayout(attendancePanel);
        attendancePanel.setLayout(attendancePanelLayout);
        attendancePanelLayout.setHorizontalGroup(
            attendancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attendancePanelLayout.createSequentialGroup()
                .addGroup(attendancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(attendancePanelLayout.createSequentialGroup()
                        .addGroup(attendancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(attendancePanelLayout.createSequentialGroup()
                                .addGap(307, 307, 307)
                                .addComponent(jLabel95))
                            .addGroup(attendancePanelLayout.createSequentialGroup()
                                .addGap(206, 206, 206)
                                .addGroup(attendancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(attendancePanelLayout.createSequentialGroup()
                                        .addComponent(jLabel96)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextField44, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(attendancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(attendancePanelLayout.createSequentialGroup()
                                            .addComponent(jButton26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jButton27, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(attendancePanelLayout.createSequentialGroup()
                                            .addComponent(jLabel97)
                                            .addGap(18, 18, 18)
                                            .addComponent(jTextField45, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(attendancePanelLayout.createSequentialGroup()
                                        .addComponent(jLabel101)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextField47, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 234, Short.MAX_VALUE))
                    .addGroup(attendancePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane11)))
                .addContainerGap())
        );
        attendancePanelLayout.setVerticalGroup(
            attendancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attendancePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel95)
                .addGap(35, 35, 35)
                .addGroup(attendancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel96)
                    .addComponent(jTextField44, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(attendancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel97)
                    .addComponent(jTextField45, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(attendancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel101)
                    .addComponent(jTextField47, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(attendancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton27)
                    .addComponent(jButton26))
                .addGap(41, 41, 41)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        viewPanel.add(attendancePanel, "attendancePanel");

        jLabel98.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel98.setText("New Payment");

        jLabel78.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel78.setText("Student ID :");

        jTextField39.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField39KeyReleased(evt);
            }
        });

        jLabel79.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel79.setText("Class ID :");

        jTextField43.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField43KeyReleased(evt);
            }
        });

        jLabel94.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel94.setText("Month :");

        jComboBox23.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        jComboBox23.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox23ItemStateChanged(evt);
            }
        });
        jComboBox23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox23ActionPerformed(evt);
            }
        });

        jLabel99.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel99.setText("Year :");

        jComboBox24.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));
        jComboBox24.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox24ItemStateChanged(evt);
            }
        });
        jComboBox24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox24ActionPerformed(evt);
            }
        });

        jTable10.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Payment ID", "Student ID", "Class ID", "Month", "Year", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable10MouseClicked(evt);
            }
        });
        jScrollPane10.setViewportView(jTable10);

        jButton28.setText("Add Payment");
        jButton28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton28ActionPerformed(evt);
            }
        });

        jLabel100.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel100.setText("Payment Amount :");

        jTextField46.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField46KeyReleased(evt);
            }
        });

        jButton30.setText("Print Invoice");
        jButton30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton30ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paymentPanelLayout = new javax.swing.GroupLayout(paymentPanel);
        paymentPanel.setLayout(paymentPanelLayout);
        paymentPanelLayout.setHorizontalGroup(
            paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paymentPanelLayout.createSequentialGroup()
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, paymentPanelLayout.createSequentialGroup()
                        .addGap(305, 305, 305)
                        .addComponent(jLabel98)
                        .addGap(0, 176, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, paymentPanelLayout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel94)
                            .addComponent(jLabel78))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField39, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                            .addComponent(jComboBox23, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(paymentPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel79)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField43))
                            .addGroup(paymentPanelLayout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jLabel99)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox24, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(paymentPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(paymentPanelLayout.createSequentialGroup()
                                .addComponent(jLabel100)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField46, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(109, 109, 109)))
                .addGap(118, 118, 118))
            .addGroup(paymentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane10)
                    .addGroup(paymentPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton30, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        paymentPanelLayout.setVerticalGroup(
            paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paymentPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel98)
                .addGap(50, 50, 50)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel78)
                    .addComponent(jTextField39, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel79)
                    .addComponent(jTextField43, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel94)
                    .addComponent(jComboBox23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel99)
                    .addComponent(jComboBox24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(paymentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel100)
                    .addComponent(jTextField46, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton28)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton30)
                .addGap(6, 6, 6))
        );

        viewPanel.add(paymentPanel, "paymentPanel");

        jMenu1.setText("File");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenu3.setText("New");

        jMenuItem1.setText("Student");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem2.setText("Teacher");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuItem3.setText("Subject");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuItem4.setText("Class");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenu1.add(jMenu3);

        jMenuItem5.setText("Enroll Student");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem6.setText("Mark Attendance");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem7.setText("Add Payment");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Exit");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(viewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        CardLayout view = (CardLayout) (viewPanel.getLayout());
        view.show(viewPanel, "studentRegistrationPanel");
        studentLabel.setBackground(Color.decode("#3c6291"));
        resetColours(0);
        loadStudents(NEWSTUDENTS, REGISTRATION);

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        CardLayout view = (CardLayout) (viewPanel.getLayout());
        view.show(viewPanel, "teacherRegistrationPanel");
        teacherLabel.setBackground(Color.decode("#3c6291"));
        resetColours(0);
        loadTeachers(NEWTEACHERS, REGISTRATION);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        CardLayout view = (CardLayout) (viewPanel.getLayout());
        view.show(viewPanel, "subjectRegistrationPanel");
        subjectLabel.setBackground(Color.decode("#3c6291"));
        resetColours(0);
        loadSubjects(NEWSUBJECTS, REGISTRATION);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        CardLayout view = (CardLayout) (viewPanel.getLayout());
        view.show(viewPanel, "classRegistrationPanel");
        classLabel.setBackground(Color.decode("#3c6291"));
        resetColours(0);
        loadClasses(NEWCLASSES, REGISTRATION);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void studentLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentLabelMouseClicked

        CardLayout view = (CardLayout) (viewPanel.getLayout());
        view.show(viewPanel, "studentsPanel");
        studentLabel.setBackground(Color.decode("#3c6291"));
        resetColours(1);

    }//GEN-LAST:event_studentLabelMouseClicked

    private void teacherLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_teacherLabelMouseClicked

        CardLayout view = (CardLayout) (viewPanel.getLayout());
        view.show(viewPanel, "teachersPanel");
        teacherLabel.setBackground(Color.decode("#3c6291"));
        resetColours(2);

    }//GEN-LAST:event_teacherLabelMouseClicked

    private void subjectLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subjectLabelMouseClicked

        CardLayout view = (CardLayout) (viewPanel.getLayout());
        view.show(viewPanel, "subjectsPanel");
        subjectLabel.setBackground(Color.decode("#3c6291"));
        resetColours(3);

    }//GEN-LAST:event_subjectLabelMouseClicked

    private void classLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_classLabelMouseClicked

        CardLayout view = (CardLayout) (viewPanel.getLayout());
        view.show(viewPanel, "classesPanel");
        classLabel.setBackground(Color.decode("#3c6291"));
        resetColours(4);

    }//GEN-LAST:event_classLabelMouseClicked

    private void jTextField24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField24ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField24ActionPerformed

    private void jTextField25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField25ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField25ActionPerformed

    private void jTable5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable5MouseClicked

        Student student = studentMap.get(jTable5.getValueAt(jTable5.getSelectedRow(), 0));

        jTextField22.setText(student.getInitials());
        jTextField16.setText(student.getFirstName());
        jTextField17.setText(student.getLastName());
        jTextField18.setText(student.getDateOfBirth());
        jTextField19.setText(student.getMobile());
        jTextField41.setText(student.getEmail());
        jTextField20.setText(student.getLine1());
        jTextField21.setText(student.getLine2());
        jComboBox9.setSelectedItem(student.getCityName());
        jComboBox10.setSelectedItem(student.getDistrictName());
        jLabel89.setText(student.getJoinedDate());

    }//GEN-LAST:event_jTable5MouseClicked

    private void jTextField37ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField37ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField37ActionPerformed

    private void jTextField41ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField41ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField41ActionPerformed

    private void jTable6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable6MouseClicked

        Teacher teacher = teacherMap.get(jTable6.getValueAt(jTable6.getSelectedRow(), 0));

        jTextField25.setText(teacher.getInitials());
        jTextField26.setText(teacher.getFirstName());
        jTextField27.setText(teacher.getLastName());
        jTextField29.setText(teacher.getMobile());
        jTextField30.setText(teacher.getEmail());
        jTextField31.setText(teacher.getLine1());
        jTextField32.setText(teacher.getLine2());
        jComboBox14.setSelectedItem(teacher.getCityName());
        jComboBox15.setSelectedItem(teacher.getDistrictName());
        jLabel91.setText(teacher.getJoinedDate());

    }//GEN-LAST:event_jTable6MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        String initials = jTextField23.getText();
        String fname = jTextField1.getText();
        String lname = jTextField2.getText();
        String dob = jTextField4.getText();
        String mobile = jTextField7.getText();
        String email = jTextField37.getText();
        String line1 = jTextField3.getText();
        String line2 = jTextField6.getText();
        String city = String.valueOf(jComboBox1.getSelectedItem());
        String district = String.valueOf(jComboBox2.getSelectedItem());
        String city_id = cityMap.get(city);
        String district_id = districtMap.get(district);

        if (!initials.matches("^([A-Z][/.])+$") && !initials.equals("")) {
            JOptionPane.showMessageDialog(this, "Invalid Initials. (Format: A.B.C.)", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (fname.equals("")) {
            JOptionPane.showMessageDialog(this, "First name cannot be empty!", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (lname.equals("")) {
            JOptionPane.showMessageDialog(this, "Last name cannot be empty!", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (dob.equals("")) {
            JOptionPane.showMessageDialog(this, "Date of Birth cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (!dob.matches("((?:19|20)[0-9][0-9])-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])")) {
            JOptionPane.showMessageDialog(this, "Invalid Date of Birth. (Format: 2000-01-01)", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (mobile.equals("")) {
            JOptionPane.showMessageDialog(this, "Mobile cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (!mobile.matches("[0-9]+")) {
            JOptionPane.showMessageDialog(this, "Mobile must be numeric!", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (!(mobile.length() == 10)) {
            JOptionPane.showMessageDialog(this, "Mobile Number should have 10 Characters!", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (!email.equals("") && !email.matches("^(?=.{1,64}@)[A-Za-z0-9\\+_-]+(\\.[A-Za-z0-9\\+_-]+)*@[^-][A-Za-z0-9\\+-]+(\\.[A-Za-z0-9\\+-]+)*(\\.[A-Za-z]{2,})$")) {
            JOptionPane.showMessageDialog(this, "Invalid Email", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (line1.equals("")) {
            JOptionPane.showMessageDialog(this, "Address Line 1 cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (city.equals("Select")) {
            JOptionPane.showMessageDialog(this, "Please select the city", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (district.equals("Select")) {
            JOptionPane.showMessageDialog(this, "Please select the district", "Error", JOptionPane.ERROR_MESSAGE);
        } else {

            try {
                Integer id = MySQL.executeInsertGetID("INSERT INTO `address`(`line1`,`line2`,`city_id`,`account_type_id`,`district_id`) "
                        + "VALUES ('" + line1 + "','" + line2 + "','" + city_id + "',1,'" + district_id + "')");

                MySQL.executeIUD("INSERT INTO `student`(`initials`,`fname`,`lname`,`mobile`,`dob`,`email`,`address_id`,`joined_date`)"
                        + "VALUES ('" + initials + "','" + fname + "','" + lname + "','" + mobile + "','" + dob + "','" + email + "','" + id + "','" + todayDate() + "')");

                storeAllStudents();
                loadStudents(NEWSTUDENTS, REGISTRATION);
                loadStudents(ALLSTUDENTS, VIEW);

            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTable7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable7MouseClicked

        Subject subject = subjectMap.get(jTable7.getValueAt(jTable7.getSelectedRow(), 0));

        jTextField35.setText(subject.getName());
        jTextField36.setText(subject.getPrice());

    }//GEN-LAST:event_jTable7MouseClicked

    private void jTable8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable8MouseClicked

        Classes classes = classMap.get(jTable8.getValueAt(jTable8.getSelectedRow(), 0));
        Subject subject = subjectMap.get(classes.getSubjectID());
        Teacher teacher = teacherMap.get(classes.getTeacherID());
        jCheckBox8.setSelected(false);
        jCheckBox9.setSelected(false);
        jCheckBox10.setSelected(false);
        jCheckBox11.setSelected(false);
        jCheckBox12.setSelected(false);
        jCheckBox13.setSelected(false);
        jCheckBox14.setSelected(false);

        jComboBox16.setSelectedItem(subject.getName());
        jComboBox17.setSelectedItem(teacher.getFullName());
        jComboBox18.setSelectedItem(classes.getTimeslot());
        Vector days = classes.getDayName();
        for (int x = 0; x < days.size(); x++) {
            if (jCheckBox8.getText().equals(days.get(x))) {
                jCheckBox8.setSelected(true);
            } else if (jCheckBox9.getText().equals(days.get(x))) {
                jCheckBox9.setSelected(true);
            } else if (jCheckBox10.getText().equals(days.get(x))) {
                jCheckBox10.setSelected(true);
            } else if (jCheckBox11.getText().equals(days.get(x))) {
                jCheckBox11.setSelected(true);
            } else if (jCheckBox12.getText().equals(days.get(x))) {
                jCheckBox12.setSelected(true);
            } else if (jCheckBox13.getText().equals(days.get(x))) {
                jCheckBox13.setSelected(true);
            } else if (jCheckBox14.getText().equals(days.get(x))) {
                jCheckBox14.setSelected(true);
            }
        }
    }//GEN-LAST:event_jTable8MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        jTextField23.setText("");
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField4.setText("");
        jTextField7.setText("");
        jTextField37.setText("");
        jTextField3.setText("");
        jTextField6.setText("");
        jComboBox1.setSelectedIndex(0);
        jComboBox2.setSelectedIndex(0);

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        String initials = jTextField24.getText();
        String fname = jTextField5.getText();
        String lname = jTextField8.getText();
        String mobile = jTextField10.getText();
        String email = jTextField13.getText();
        String line1 = jTextField11.getText();
        String line2 = jTextField12.getText();
        String city = String.valueOf(jComboBox3.getSelectedItem());
        String district = String.valueOf(jComboBox4.getSelectedItem());
        String city_id = cityMap.get(city);
        String district_id = districtMap.get(district);

        if (!initials.matches("^([A-Z][/.])+$") && !initials.equals("")) {
            JOptionPane.showMessageDialog(this, "Invalid Initials. (Format: A.B.C.)", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (fname.equals("")) {
            JOptionPane.showMessageDialog(this, "First name cannot be empty!", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (lname.equals("")) {
            JOptionPane.showMessageDialog(this, "Last name cannot be empty!", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (mobile.equals("")) {
            JOptionPane.showMessageDialog(this, "Mobile cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (!mobile.matches("[0-9]+")) {
            JOptionPane.showMessageDialog(this, "Mobile must be numeric!", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (!(mobile.length() == 10)) {
            JOptionPane.showMessageDialog(this, "Mobile Number should have 10 Characters!", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (!email.equals("") && !email.matches("^(?=.{1,64}@)[A-Za-z0-9\\+_-]+(\\.[A-Za-z0-9\\+_-]+)*@[^-][A-Za-z0-9\\+-]+(\\.[A-Za-z0-9\\+-]+)*(\\.[A-Za-z]{2,})$")) {
            JOptionPane.showMessageDialog(this, "Invalid Email", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (line1.equals("")) {
            JOptionPane.showMessageDialog(this, "Address Line 1 cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
        } else {

            try {
                Integer id = MySQL.executeInsertGetID("INSERT INTO `address`(`line1`,`line2`,`city_id`,`account_type_id`,`district_id`) "
                        + "VALUES ('" + line1 + "','" + line2 + "','" + city_id + "',2,'" + district_id + "')");

                MySQL.executeIUD("INSERT INTO `teacher`(`initials`,`fname`,`lname`,`mobile`,`email`,`address_id`,`joined_date`)"
                        + "VALUES ('" + initials + "','" + fname + "','" + lname + "','" + mobile + "','" + email + "','" + id + "','" + todayDate() + "')");

                storeAllTeachers();
                loadTeachers(NEWTEACHERS, REGISTRATION);
                loadTeachers(ALLTEACHERS, VIEW);

            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed

        String name = jTextField14.getText();
        String price = jTextField15.getText();

        if (name.equals("")) {
            JOptionPane.showMessageDialog(this, "Name cannot be empty!", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (price.equals("")) {
            JOptionPane.showMessageDialog(this, "Price cannot be empty!", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (!price.matches("[0-9]+")) {
            JOptionPane.showMessageDialog(this, "Price should be numeric with no decimals!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                MySQL.executeIUD("INSERT INTO `subject` (`description`,`price`,`added_date`) VALUES('" + name + "','" + price + "','" + todayDate() + "')");
                storeAllSubjects();
                loadSubjects(NEWSUBJECTS, REGISTRATION);
                loadSubjects(ALLSUBJECTS, VIEW);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed

        String subject = String.valueOf(jComboBox5.getSelectedItem());
        String teacher = String.valueOf(jComboBox6.getSelectedItem());
        String timeslot = String.valueOf(jComboBox7.getSelectedItem());

        if (subject.equals("Select") || teacher.equals("Select") || timeslot.equals("Select")) {
            JOptionPane.showMessageDialog(this, "All Fields must be selected!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            if (jCheckBox1.isSelected() || jCheckBox2.isSelected() || jCheckBox3.isSelected() || jCheckBox4.isSelected() || jCheckBox5.isSelected() || jCheckBox6.isSelected() || jCheckBox7.isSelected()) {
                String subjectID = subjectListMap.get(subject);
                String teacherID = teacherListMap.get(teacher);
                String timeslotID = timeslotMap.get(timeslot);

                try {

                    ResultSet classExist = MySQL.executeSearch("SELECT * FROM `class` "
                            + "WHERE `subno` = '" + subjectID + "' AND `tno` = '" + teacherID + "' AND `timeslot_id` = '" + timeslotID + "'");

                    
                    Boolean classAlreadyExist = true;

                    if (classExist.next()) {
                        Classes thisClass = classMap.get(classExist.getString("classno"));
                        Vector days = thisClass.getDayName();
                        String daysText = "";
                        for (int x = 0; x < days.size(); x++) {
                            if (jCheckBox1.getText().equals(days.get(x)) && jCheckBox1.isSelected()) {
                                daysText += days.get(x) + " ";
                            } else if (jCheckBox2.getText().equals(days.get(x)) && jCheckBox2.isSelected()) {
                                daysText += days.get(x) + " ";
                            } else if (jCheckBox3.getText().equals(days.get(x)) && jCheckBox3.isSelected()) {
                                daysText += days.get(x) + " ";
                            } else if (jCheckBox4.getText().equals(days.get(x)) && jCheckBox4.isSelected()) {
                                daysText += days.get(x) + " ";
                            } else if (jCheckBox5.getText().equals(days.get(x)) && jCheckBox5.isSelected()) {
                                daysText += days.get(x) + " ";
                            } else if (jCheckBox6.getText().equals(days.get(x)) && jCheckBox6.isSelected()) {
                                daysText += days.get(x) + " ";
                            } else if (jCheckBox7.getText().equals(days.get(x)) && jCheckBox7.isSelected()) {
                                daysText += days.get(x) + " ";
                            }
                        }

                        if (daysText.equals("")) {
                            classAlreadyExist = false;
                        } else {
                            classAlreadyExist = true;
                            JOptionPane.showMessageDialog(this, "This class already exists for the day(s) " + daysText + "!", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }

                    if (!classAlreadyExist) {
                        ResultSet availability = MySQL.executeSearch("SELECT * FROM `class` "
                                + "WHERE `tno` = '" + teacherID + "' AND `timeslot_id` = '" + timeslotID + "'");
                        Boolean available = true;

                        while (availability.next()) {
                            Classes thisClass = classMap.get(availability.getString("classno"));
                            Vector days = thisClass.getDayName();

                            for (int x = 0; x < days.size(); x++) {
                                if (jCheckBox1.getText().equals(days.get(x)) && jCheckBox1.isSelected()) {
                                    available = false;
                                    break;
                                }
                                if (jCheckBox2.getText().equals(days.get(x)) && jCheckBox2.isSelected()) {
                                    available = false;
                                    break;
                                }
                                if (jCheckBox3.getText().equals(days.get(x)) && jCheckBox3.isSelected()) {
                                    available = false;
                                    break;
                                }
                                if (jCheckBox4.getText().equals(days.get(x)) && jCheckBox4.isSelected()) {
                                    available = false;
                                    break;
                                }
                                if (jCheckBox5.getText().equals(days.get(x)) && jCheckBox5.isSelected()) {
                                    available = false;
                                    break;
                                }
                                if (jCheckBox6.getText().equals(days.get(x)) && jCheckBox6.isSelected()) {
                                    available = false;
                                    break;
                                }
                                if (jCheckBox7.getText().equals(days.get(x)) && jCheckBox7.isSelected()) {
                                    available = false;
                                    break;
                                }
                            }

                            if (!available) {
                                JOptionPane.showMessageDialog(this, "Selected timeslot is not available!", "Error", JOptionPane.ERROR_MESSAGE);
                                break;
                            }

                        }
                        if (available) {

                            int classID = MySQL.executeInsertGetID("INSERT INTO `class` (`subno`,`tno`,`timeslot_id`,`date_added`) "
                                    + "VALUES ('" + subjectID + "','" + teacherID + "','" + timeslotID + "','" + todayDate() + "')");

                            if (jCheckBox1.isSelected()) {
                                String dayID = dayMap.get(jCheckBox1.getText());
                                MySQL.executeIUD("INSERT INTO `class_has_day` (`class_classno`,`day_id`) VALUES('" + classID + "','" + dayID + "')");
                            }
                            if (jCheckBox2.isSelected()) {
                                String dayID = dayMap.get(jCheckBox2.getText());
                                MySQL.executeIUD("INSERT INTO `class_has_day` (`class_classno`,`day_id`) VALUES('" + classID + "','" + dayID + "')");
                            }
                            if (jCheckBox3.isSelected()) {
                                String dayID = dayMap.get(jCheckBox3.getText());
                                MySQL.executeIUD("INSERT INTO `class_has_day` (`class_classno`,`day_id`) VALUES('" + classID + "','" + dayID + "')");
                            }
                            if (jCheckBox4.isSelected()) {
                                String dayID = dayMap.get(jCheckBox4.getText());
                                MySQL.executeIUD("INSERT INTO `class_has_day` (`class_classno`,`day_id`) VALUES('" + classID + "','" + dayID + "')");
                            }
                            if (jCheckBox5.isSelected()) {
                                String dayID = dayMap.get(jCheckBox5.getText());
                                MySQL.executeIUD("INSERT INTO `class_has_day` (`class_classno`,`day_id`) VALUES('" + classID + "','" + dayID + "')");
                            }
                            if (jCheckBox6.isSelected()) {
                                String dayID = dayMap.get(jCheckBox6.getText());
                                MySQL.executeIUD("INSERT INTO `class_has_day` (`class_classno`,`day_id`) VALUES('" + classID + "','" + dayID + "')");
                            }
                            if (jCheckBox7.isSelected()) {
                                String dayID = dayMap.get(jCheckBox7.getText());
                                MySQL.executeIUD("INSERT INTO `class_has_day` (`class_classno`,`day_id`) VALUES('" + classID + "','" + dayID + "')");
                            }

                            storeAllClasses();
                            loadClasses(NEWCLASSES, REGISTRATION);
                            loadClasses(ALLCLASSES, VIEW);

                        }
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select the days!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        jTextField24.setText("");
        jTextField5.setText("");
        jTextField8.setText("");
        jTextField10.setText("");
        jTextField13.setText("");
        jTextField11.setText("");
        jTextField12.setText("");
        jComboBox3.setSelectedItem("Select");
        jComboBox4.setSelectedItem("Select");

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

        jTextField14.setText("");
        jTextField15.setText("");

    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        jComboBox5.setSelectedItem("Select");
        jComboBox6.setSelectedItem("Select");
        jComboBox7.setSelectedItem("Select");
        jCheckBox1.setSelected(false);
        jCheckBox2.setSelected(false);
        jCheckBox3.setSelected(false);
        jCheckBox4.setSelected(false);
        jCheckBox5.setSelected(false);
        jCheckBox6.setSelected(false);
        jCheckBox7.setSelected(false);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed

        if (jTable5.getSelectedRow() != -1) {
            int row = jTable5.getSelectedRow();
            String id = String.valueOf(jTable5.getValueAt(row, 0));

            int results = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this student with id " + id + "? All class enrolments will be deleted.", "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (results == JOptionPane.YES_OPTION) {
                try {

                    MySQL.executeIUD("DELETE FROM `student_enrolment` WHERE `sno` = '" + id + "'");
                    MySQL.executeIUD("UPDATE `student` SET `status` = '" + 0 + "' WHERE `sno` = '" + id + "'");
                    storeAllStudents();
                    loadStudents(NEWSTUDENTS, REGISTRATION);
                    loadStudents(ALLSTUDENTS, VIEW);

                    jTextField22.setText("");
                    jTextField16.setText("");
                    jTextField17.setText("");
                    jTextField18.setText("");
                    jTextField19.setText("");
                    jTextField41.setText("");
                    jTextField20.setText("");
                    jTextField21.setText("");
                    jComboBox9.setSelectedItem("Select");
                    jComboBox10.setSelectedItem("Select");
                    jLabel89.setText(" ");

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a student", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton19ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed

        if (jTable6.getSelectedRow() != -1) {
            int row = jTable6.getSelectedRow();
            String id = String.valueOf(jTable6.getValueAt(row, 0));

            int results = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this teacher with id " + id + "? This will also delete all the classes done by this teacher.", "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (results == JOptionPane.YES_OPTION) {

                try {
                    MySQL.executeIUD("UPDATE `teacher` SET `status` = '" + 0 + "' WHERE `tno` = '" + id + "'");
                    MySQL.executeIUD("UPDATE `class` SET `status` = '" + 0 + "' WHERE `tno` = '" + id + "'");
                    storeAllTeachers();
                    loadTeachers(NEWTEACHERS, REGISTRATION);
                    loadTeachers(ALLTEACHERS, VIEW);

                    loadClasses(NEWCLASSES, REGISTRATION);
                    loadClasses(ALLCLASSES, VIEW);

                    jTextField25.setText("");
                    jTextField26.setText("");
                    jTextField27.setText("");
                    jTextField29.setText("");
                    jTextField30.setText("");
                    jTextField31.setText("");
                    jTextField32.setText("");
                    jComboBox14.setSelectedItem("Select");
                    jComboBox15.setSelectedItem("Select");
                    jLabel91.setText(" ");

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a teacher", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton20ActionPerformed

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed

        if (jTable7.getSelectedRow() != -1) {
            int row = jTable7.getSelectedRow();
            String id = String.valueOf(jTable7.getValueAt(row, 0));

            int results = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this subject with id " + id + "? This will delete all the other classes with this subject", "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (results == JOptionPane.YES_OPTION) {
                try {

                    MySQL.executeIUD("UPDATE `subject` SET `status` = '" + 0 + "' WHERE `subno` = '" + id + "'");
                    MySQL.executeIUD("UPDATE `class` SET `status` = '" + 0 + "' WHERE `subno` = '" + id + "'");

                    storeAllSubjects();
                    loadSubjects(NEWSUBJECTS, REGISTRATION);
                    loadSubjects(ALLSUBJECTS, VIEW);

                    loadClasses(NEWSUBJECTS, REGISTRATION);
                    loadClasses(ALLSUBJECTS, VIEW);

                    jTextField35.setText("");
                    jTextField36.setText("");

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a subject", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton21ActionPerformed

    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed

        if (jTable8.getSelectedRow() != -1) {
            String id = String.valueOf(jTable8.getValueAt(jTable8.getSelectedRow(), 0));

            int results = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this class with id " + id + "?", "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (results == JOptionPane.YES_OPTION) {
                try {

                    boolean foundInAttendance = false;
                    boolean foundInEnrolment = false;
                    boolean foundInInvoice = false;

                    if (MySQL.executeSearch("SELECT * FROM `attendance` WHERE `classno` = '" + id + "'").next()) {
                        foundInAttendance = true;
                    }

                    if (MySQL.executeSearch("SELECT * FROM `student_enrolment` WHERE `classno` = '" + id + "'").next()) {
                        foundInEnrolment = true;
                    }

                    if (MySQL.executeSearch("SELECT * FROM `invoice` WHERE `classno` = '" + id + "'").next()) {
                        foundInInvoice = true;
                    }

                    if (foundInAttendance || foundInEnrolment || foundInInvoice) {
                        MySQL.executeIUD("UPDATE `class` SET `status` = '0' WHERE `classno` = '" + id + "'");
                    } else {
                        MySQL.executeIUD("DELETE FROM `class` WHERE `classno` = '" + id + "'");
                    }

                    storeAllClasses();
                    loadClasses(NEWCLASSES, REGISTRATION);
                    loadClasses(ALLCLASSES, VIEW);

                    jComboBox16.setSelectedItem("Select");
                    jComboBox17.setSelectedItem("Select");
                    jComboBox18.setSelectedItem("Select");
                    jCheckBox1.setSelected(false);
                    jCheckBox2.setSelected(false);
                    jCheckBox3.setSelected(false);
                    jCheckBox4.setSelected(false);
                    jCheckBox5.setSelected(false);
                    jCheckBox6.setSelected(false);
                    jCheckBox7.setSelected(false);

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a class", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton24ActionPerformed

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        if (jTable8.getSelectedRow() != -1) {
            String subject = String.valueOf(jComboBox16.getSelectedIndex());
            String teacher = String.valueOf(jComboBox17.getSelectedIndex());
            String timeslot = String.valueOf(jComboBox18.getSelectedIndex());

            if (subject.equals("Select") || teacher.equals("Select") || timeslot.equals("Select")) {
                JOptionPane.showMessageDialog(this, "All fields must be selected!", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                if (jCheckBox8.isSelected() || jCheckBox9.isSelected() || jCheckBox10.isSelected() || jCheckBox11.isSelected() || jCheckBox12.isSelected() || jCheckBox13.isSelected() || jCheckBox14.isSelected()) {

                    String id = String.valueOf(jTable8.getValueAt(jTable8.getSelectedRow(), 0));
                    String subjectID = subjectListMap.get(subject);
                    String teacherID = teacherListMap.get(subject);
                    String timeslotID = timeslotMap.get(subject);

                    try {

                        ResultSet classExist = MySQL.executeSearch("SELECT * FROM `class` "
                                + "WHERE `subno` = '" + subjectID + "' AND `tno` = '" + teacherID + "' AND `timeslot_id` = '" + timeslotID + "'");

                        Boolean classAlreadyExist = true;

                        if (classExist.next()) {
                            Classes thisClass = classMap.get(classExist.getString("classno"));
                            Vector days = thisClass.getDayName();
                            String daysText = "";
                            for (int x = 0; x < days.size(); x++) {
                                if (jCheckBox8.getText().equals(days.get(x)) && jCheckBox8.isSelected()) {
                                    daysText += days.get(x) + " ";
                                } else if (jCheckBox9.getText().equals(days.get(x)) && jCheckBox9.isSelected()) {
                                    daysText += days.get(x) + " ";
                                } else if (jCheckBox10.getText().equals(days.get(x)) && jCheckBox10.isSelected()) {
                                    daysText += days.get(x) + " ";
                                } else if (jCheckBox11.getText().equals(days.get(x)) && jCheckBox11.isSelected()) {
                                    daysText += days.get(x) + " ";
                                } else if (jCheckBox12.getText().equals(days.get(x)) && jCheckBox12.isSelected()) {
                                    daysText += days.get(x) + " ";
                                } else if (jCheckBox13.getText().equals(days.get(x)) && jCheckBox13.isSelected()) {
                                    daysText += days.get(x) + " ";
                                } else if (jCheckBox14.getText().equals(days.get(x)) && jCheckBox14.isSelected()) {
                                    daysText += days.get(x) + " ";
                                }
                            }

                            if (daysText.equals("")) {
                                classAlreadyExist = false;
                            } else {
                                classAlreadyExist = true;
                                JOptionPane.showMessageDialog(this, "This class already exists for the day(s) " + daysText + "!", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        }

                        if (!classAlreadyExist) {
                            ResultSet availability = MySQL.executeSearch("SELECT * FROM `class` "
                                    + "WHERE `tno` = '" + teacherID + "' AND `timeslot_id` = '" + timeslotID + "'");
                            Boolean available = true;

                            while (availability.next()) {
                                Classes thisClass = classMap.get(availability.getString("classno"));
                                Vector days = thisClass.getDayName();

                                for (int x = 0; x < days.size(); x++) {
                                    if (jCheckBox1.getText().equals(days.get(x)) && jCheckBox1.isSelected()) {
                                        available = false;
                                        break;
                                    }
                                    if (jCheckBox2.getText().equals(days.get(x)) && jCheckBox2.isSelected()) {
                                        available = false;
                                        break;
                                    }
                                    if (jCheckBox3.getText().equals(days.get(x)) && jCheckBox3.isSelected()) {
                                        available = false;
                                        break;
                                    }
                                    if (jCheckBox4.getText().equals(days.get(x)) && jCheckBox4.isSelected()) {
                                        available = false;
                                        break;
                                    }
                                    if (jCheckBox5.getText().equals(days.get(x)) && jCheckBox5.isSelected()) {
                                        available = false;
                                        break;
                                    }
                                    if (jCheckBox6.getText().equals(days.get(x)) && jCheckBox6.isSelected()) {
                                        available = false;
                                        break;
                                    }
                                    if (jCheckBox7.getText().equals(days.get(x)) && jCheckBox7.isSelected()) {
                                        available = false;
                                        break;
                                    }
                                }

                                if (!available) {
                                    JOptionPane.showMessageDialog(this, "Selected timeslot is not available!", "Error", JOptionPane.ERROR_MESSAGE);
                                    break;
                                }

                            }
                            if (available) {

                                MySQL.executeIUD("UPDATE `class` SET `subno`='" + subjectID + "',`tno`='" + teacherID + "',`timeslot_id`='" + timeslotID + "' "
                                        + "WHERE `classno`='" + id + "'");
                                MySQL.executeIUD("DELETE FROM `class_has_day` WHERE `class_classno`='" + id + "'");

                                if (jCheckBox1.isSelected()) {
                                    String dayID = dayMap.get(jCheckBox1.getText());
                                    MySQL.executeIUD("INSERT INTO `class_has_day` (`class_classno`,`day_id`) VALUES('" + id + "','" + dayID + "')");
                                }
                                if (jCheckBox2.isSelected()) {
                                    String dayID = dayMap.get(jCheckBox2.getText());
                                    MySQL.executeIUD("INSERT INTO `class_has_day` (`class_classno`,`day_id`) VALUES('" + id + "','" + dayID + "')");
                                }
                                if (jCheckBox3.isSelected()) {
                                    String dayID = dayMap.get(jCheckBox3.getText());
                                    MySQL.executeIUD("INSERT INTO `class_has_day` (`class_classno`,`day_id`) VALUES('" + id + "','" + dayID + "')");
                                }
                                if (jCheckBox4.isSelected()) {
                                    String dayID = dayMap.get(jCheckBox4.getText());
                                    MySQL.executeIUD("INSERT INTO `class_has_day` (`class_classno`,`day_id`) VALUES('" + id + "','" + dayID + "')");
                                }
                                if (jCheckBox5.isSelected()) {
                                    String dayID = dayMap.get(jCheckBox5.getText());
                                    MySQL.executeIUD("INSERT INTO `class_has_day` (`class_classno`,`day_id`) VALUES('" + id + "','" + dayID + "')");
                                }
                                if (jCheckBox6.isSelected()) {
                                    String dayID = dayMap.get(jCheckBox6.getText());
                                    MySQL.executeIUD("INSERT INTO `class_has_day` (`class_classno`,`day_id`) VALUES('" + id + "','" + dayID + "')");
                                }
                                if (jCheckBox7.isSelected()) {
                                    String dayID = dayMap.get(jCheckBox7.getText());
                                    MySQL.executeIUD("INSERT INTO `class_has_day` (`class_classno`,`day_id`) VALUES('" + id + "','" + dayID + "')");
                                }

                                storeAllClasses();
                                loadClasses(NEWCLASSES, REGISTRATION);
                                loadClasses(ALLCLASSES, VIEW);
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Please select the days!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a class", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton23ActionPerformed

    private void jTextField33KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField33KeyReleased
        if (jTextField33.getText().matches("[a-zA-Z]+") || jTextField33.getText().equals("")) {
            filterStudent();
        } else {
            JOptionPane.showMessageDialog(this, "Only letters allowed", "Error", JOptionPane.ERROR_MESSAGE);
            jTextField33.setText("");
        }
    }//GEN-LAST:event_jTextField33KeyReleased

    private void jComboBox11ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox11ItemStateChanged
        if (evt.getStateChange() == SELECTED) {
            jTable5.clearSelection();
            filterStudent();
        }
    }//GEN-LAST:event_jComboBox11ItemStateChanged

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        resetFields(studentFilters);
        filterStudent();
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jTextField34KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField34KeyReleased
        if (jTextField34.getText().matches("[a-zA-Z]+") || jTextField34.getText().equals("")) {
            filterTeacher();
        } else {
            JOptionPane.showMessageDialog(this, "Only letters allowed", "Error", JOptionPane.ERROR_MESSAGE);
            jTextField34.setText("");
        }
    }//GEN-LAST:event_jTextField34KeyReleased

    private void jComboBox12ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox12ItemStateChanged

        if (evt.getStateChange() == SELECTED) {
            filterTeacher();
        }

    }//GEN-LAST:event_jComboBox12ItemStateChanged

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed

        resetFields(teacherFilters);
        filterTeacher();

    }//GEN-LAST:event_jButton15ActionPerformed

    private void jTextField40KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField40KeyReleased
        if (jTextField40.getText().matches("[0-9]+") || jTextField40.getText().equals("")) {
            filterClass();
        } else {
            JOptionPane.showMessageDialog(this, "Only numbers allowed", "Error", JOptionPane.ERROR_MESSAGE);
            jTextField40.setText("");
        }
    }//GEN-LAST:event_jTextField40KeyReleased

    private void jTextField42KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField42KeyReleased
        if (jTextField42.getText().matches("[0-9]+") || jTextField42.getText().equals("")) {
            filterClass();
        } else {
            JOptionPane.showMessageDialog(this, "Only numbers allowed", "Error", JOptionPane.ERROR_MESSAGE);
            jTextField42.setText("");
        }
    }//GEN-LAST:event_jTextField42KeyReleased

    private void jComboBox21ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox21ItemStateChanged
        if (evt.getStateChange() == SELECTED) {
            filterClass();
        }
    }//GEN-LAST:event_jComboBox21ItemStateChanged

    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton22ActionPerformed
        resetFields(classFilters);
        filterClass();

    }//GEN-LAST:event_jButton22ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed

        if (jTable5.getSelectedRow() != -1) {
            String studentID = String.valueOf(jTable5.getValueAt(jTable5.getSelectedRow(), 0));
            String addressID = studentMap.get(studentID).getAddressID();

            String initials = jTextField22.getText();
            String fname = jTextField16.getText();
            String lname = jTextField17.getText();
            String dob = jTextField18.getText();
            String mobile = jTextField19.getText();
            String email = jTextField41.getText();
            String line1 = jTextField20.getText();
            String line2 = jTextField21.getText();
            String city = String.valueOf(jComboBox9.getSelectedItem());
            String district = String.valueOf(jComboBox10.getSelectedItem());
            String city_id = cityMap.get(city);
            String district_id = districtMap.get(district);

            if (!initials.matches("^([A-Z][/.])+$") && !initials.equals("")) {
                JOptionPane.showMessageDialog(this, "Invalid Initials. (Format: A.B.C.)", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (fname.equals("")) {
                JOptionPane.showMessageDialog(this, "First name cannot be empty!", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (lname.equals("")) {
                JOptionPane.showMessageDialog(this, "Last name cannot be empty!", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (dob.equals("")) {
                JOptionPane.showMessageDialog(this, "Date of Birth cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (!dob.matches("((?:19|20)[0-9][0-9])-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])")) {
                JOptionPane.showMessageDialog(this, "Invalid Date of Birth. (Format: 2000-01-01)", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (mobile.equals("")) {
                JOptionPane.showMessageDialog(this, "Mobile cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (!mobile.matches("[0-9]+")) {
                JOptionPane.showMessageDialog(this, "Mobile must be numeric!", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (!(mobile.length() == 10)) {
                JOptionPane.showMessageDialog(this, "Mobile Number should have 10 Characters!", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (!email.equals("") && !email.matches("^(?=.{1,64}@)[A-Za-z0-9\\+_-]+(\\.[A-Za-z0-9\\+_-]+)*@[^-][A-Za-z0-9\\+-]+(\\.[A-Za-z0-9\\+-]+)*(\\.[A-Za-z]{2,})$")) {
                JOptionPane.showMessageDialog(this, "Invalid Email", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (line1.equals("")) {
                JOptionPane.showMessageDialog(this, "Address Line 1 cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (city.equals("Select")) {
                JOptionPane.showMessageDialog(this, "Please select the city", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (district.equals("Select")) {
                JOptionPane.showMessageDialog(this, "Please select the district", "Error", JOptionPane.ERROR_MESSAGE);
            } else {

                try {
                    MySQL.executeIUD("UPDATE `student` SET `initials` = '" + initials + "',`fname`='" + fname + "',`lname`='" + lname + "',"
                            + "`mobile`='" + mobile + "',`dob`='" + dob + "',`email`='" + email + "' WHERE `sno`='" + studentID + "'");
                    MySQL.executeIUD("UPDATE `address` SET `line1`='" + line1 + "',`line2`='" + line2 + "',`city_id`='" + city_id + "',`district_id`='" + district_id + "' "
                            + "WHERE `id`='" + addressID + "'");

                    storeAllStudents();
                    loadStudents(NEWSTUDENTS, REGISTRATION);
                    loadStudents(ALLSTUDENTS, VIEW);

                    resetFields(studentDetails);

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        } else {
            JOptionPane.showMessageDialog(this, "Select a student first", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton13ActionPerformed

    private void jTable5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable5MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable5MouseEntered

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        if (jTable6.getSelectedRow() != -1) {
            String teacherID = String.valueOf(jTable6.getValueAt(jTable6.getSelectedRow(), 0));
            String addressID = teacherMap.get(teacherID).getAddressID();

            String initials = jTextField25.getText();
            String fname = jTextField26.getText();
            String lname = jTextField27.getText();
            String mobile = jTextField29.getText();
            String email = jTextField30.getText();
            String line1 = jTextField31.getText();
            String line2 = jTextField32.getText();
            String city = String.valueOf(jComboBox14.getSelectedItem());
            String district = String.valueOf(jComboBox15.getSelectedItem());
            String city_id = cityMap.get(city);
            String district_id = districtMap.get(district);

            if (!initials.matches("^([A-Z][/.])+$") && !initials.equals("")) {
                JOptionPane.showMessageDialog(this, "Invalid Initials. (Format: A.B.C.)", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (fname.equals("")) {
                JOptionPane.showMessageDialog(this, "First name cannot be empty!", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (lname.equals("")) {
                JOptionPane.showMessageDialog(this, "Last name cannot be empty!", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (mobile.equals("")) {
                JOptionPane.showMessageDialog(this, "Mobile cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (!mobile.matches("[0-9]+")) {
                JOptionPane.showMessageDialog(this, "Mobile must be numeric!", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (!(mobile.length() == 10)) {
                JOptionPane.showMessageDialog(this, "Mobile Number should have 10 Characters!", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (!email.equals("") && !email.matches("^(?=.{1,64}@)[A-Za-z0-9\\+_-]+(\\.[A-Za-z0-9\\+_-]+)*@[^-][A-Za-z0-9\\+-]+(\\.[A-Za-z0-9\\+-]+)*(\\.[A-Za-z]{2,})$")) {
                JOptionPane.showMessageDialog(this, "Invalid Email", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (line1.equals("")) {
                JOptionPane.showMessageDialog(this, "Address Line 1 cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (city.equals("Select")) {
                JOptionPane.showMessageDialog(this, "Please select the city", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (district.equals("Select")) {
                JOptionPane.showMessageDialog(this, "Please select the district", "Error", JOptionPane.ERROR_MESSAGE);
            } else {

                try {
                    MySQL.executeIUD("UPDATE `teacher` SET `initials` = '" + initials + "',`fname`='" + fname + "',`lname`='" + lname + "',"
                            + "`mobile`='" + mobile + "',`email`='" + email + "' WHERE `tno`='" + teacherID + "'");
                    MySQL.executeIUD("UPDATE `address` SET `line1`='" + line1 + "',`line2`='" + line2 + "',`city_id`='" + city_id + "',`district_id`='" + district_id + "' "
                            + "WHERE `id`='" + addressID + "'");

                    storeAllTeachers();
                    loadTeachers(NEWTEACHERS, REGISTRATION);
                    loadTeachers(ALLTEACHERS, VIEW);

                    resetFields(teacherDetails);

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        } else {
            JOptionPane.showMessageDialog(this, "Select a teacher first", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed

        if (jTable7.getSelectedRow() != -1) {
            String subjectID = String.valueOf(jTable7.getValueAt(jTable7.getSelectedRow(), 0));
            String name = jTextField35.getText();
            String price = jTextField36.getText();
            Boolean isDouble = true;

            if (name.equals("")) {
                JOptionPane.showMessageDialog(this, "Please enter the name", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                try {
                    Double priceDouble = Double.parseDouble(price);
                    System.out.println(priceDouble);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Invalid Price!", "Error", JOptionPane.ERROR_MESSAGE);
                    isDouble = false;
                }
            }

            if (isDouble) {
                try {
                    MySQL.executeIUD("UPDATE `subject` SET `description`='" + name + "',`price`='" + price + "' WHERE `subno`='" + subjectID + "'");
                } catch (Exception e) {
                    e.printStackTrace();
                }

                storeAllSubjects();
                loadSubjects(ALLSUBJECTS, VIEW);
                loadSubjects(NEWSUBJECTS, REGISTRATION);

                resetFields(subjectDetails);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Select a subject first", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked

        int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to exit?", "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

        if (option == JOptionPane.YES_OPTION) {
            System.exit(0);
        }

    }//GEN-LAST:event_jMenu2MouseClicked

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed

    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        CardLayout view = (CardLayout) (viewPanel.getLayout());
        view.show(viewPanel, "studentEnrollmentPanel");
        resetColours(0);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jTextField38ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField38ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField38ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed

        String studentID = jTextField28.getText();
        String classID = jTextField38.getText();

        if (studentID.equals("") || classID.equals("")) {
            JOptionPane.showMessageDialog(this, "Both fields should be filled!", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (!studentID.matches("[0-9]+") || !classID.matches("[0-9]+")) {
            JOptionPane.showMessageDialog(this, "Both fields should be numeric!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {

                ResultSet student = MySQL.executeSearch("SELECT * FROM `student` WHERE `sno` = '" + studentID + "'");
                ResultSet classes = MySQL.executeSearch("SELECT * FROM `class` WHERE `classno` = '" + classID + "'");
                Boolean validStudent = false;
                Boolean validClass = false;

                if (student.next()) {
                    validStudent = true;

                    if (classes.next()) {
                        validClass = true;
                    } else {
                        validClass = false;
                        JOptionPane.showMessageDialog(this, "Invalid Class ID!", "Error", JOptionPane.ERROR_MESSAGE);
                    }

                } else {
                    validStudent = false;
                    JOptionPane.showMessageDialog(this, "Invalid Student ID!", "Error", JOptionPane.ERROR_MESSAGE);
                }

                if (validStudent && validClass) {
                    ResultSet results = MySQL.executeSearch("SELECT * FROM `student_enrolment` WHERE `sno` = '" + studentID + "' AND `classno` = '" + classID + "'");

                    if (results.next()) {
                        JOptionPane.showMessageDialog(this, "This student is already enrolled in this class!", "Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        MySQL.executeIUD("INSERT INTO `student_enrolment` (`sno`,`classno`) VALUES ('" + studentID + "','" + classID + "')");
                        JOptionPane.showMessageDialog(this, "Student with id " + studentID + " is added to the class with id " + classID, "Enrolment Successful!", JOptionPane.INFORMATION_MESSAGE);
                        jTextField28.setText("");
                        jTextField38.setText("");
                        loadStudentEnrolments(ALLSTUDENTENROLMENTS);
                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton25ActionPerformed
        String studentID = jTextField28.getText();
        String classID = jTextField38.getText();

        if (studentID.equals("") || classID.equals("")) {
            JOptionPane.showMessageDialog(this, "Both fields should be filled!", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (!studentID.matches("[0-9]+") || !classID.matches("[0-9]+")) {
            JOptionPane.showMessageDialog(this, "Both fields should be numeric!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {

                ResultSet student = MySQL.executeSearch("SELECT * FROM `student` WHERE `sno` = '" + studentID + "'");
                ResultSet classes = MySQL.executeSearch("SELECT * FROM `class` WHERE `classno` = '" + classID + "'");
                Boolean validStudent = false;
                Boolean validClass = false;

                if (student.next()) {
                    validStudent = true;

                    if (classes.next()) {
                        validClass = true;
                    } else {
                        validClass = false;
                        JOptionPane.showMessageDialog(this, "Invalid Class ID!", "Error", JOptionPane.ERROR_MESSAGE);
                    }

                } else {
                    validStudent = false;
                    JOptionPane.showMessageDialog(this, "Invalid Student ID!", "Error", JOptionPane.ERROR_MESSAGE);
                }

                if (validStudent && validClass) {
                    ResultSet results = MySQL.executeSearch("SELECT * FROM `student_enrolment` WHERE `sno` = '" + studentID + "' AND `classno` = '" + classID + "'");

                    if (results.next()) {
                        MySQL.executeIUD("DELETE FROM `student_enrolment` WHERE `sno` = '" + studentID + "' AND `classno` = '" + classID + "'");
                        JOptionPane.showMessageDialog(this, "Student with id " + studentID + " is removed from the class with id " + classID, "Student Removed Successfully!", JOptionPane.INFORMATION_MESSAGE);
                        jTextField28.setText("");
                        jTextField38.setText("");
                        loadStudentEnrolments(ALLSTUDENTENROLMENTS);

                    } else {
                        JOptionPane.showMessageDialog(this, "This student is not enrolled in this class!", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Student number or class number is not valid!", "Error", JOptionPane.ERROR_MESSAGE);
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton25ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        CardLayout view = (CardLayout) (viewPanel.getLayout());
        view.show(viewPanel, "attendancePanel");
        resetColours(0);
        loadAttendance();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jTextField45ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField45ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField45ActionPerformed

    private void jButton26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton26ActionPerformed
        markAttendance(PRESENT);
    }//GEN-LAST:event_jButton26ActionPerformed

    private void jButton27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton27ActionPerformed
        markAttendance(ABSENT);
    }//GEN-LAST:event_jButton27ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        CardLayout view = (CardLayout) (viewPanel.getLayout());
        view.show(viewPanel, "paymentPanel");
        resetColours(0);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jTextField39KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField39KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField39KeyReleased

    private void jTextField43KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField43KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField43KeyReleased

    private void jComboBox23ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox23ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox23ItemStateChanged

    private void jComboBox23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox23ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox23ActionPerformed

    private void jComboBox24ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox24ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox24ItemStateChanged

    private void jComboBox24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox24ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox24ActionPerformed

    private void jButton28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton28ActionPerformed

        String studentID = jTextField39.getText();
        String classID = jTextField43.getText();
        String amount = jTextField46.getText();
        String month = monthMap.get(String.valueOf(jComboBox23.getSelectedItem()));
        String year = String.valueOf(jComboBox24.getSelectedItem());

        if (studentID.equals("") || classID.equals("") || amount.equals("")) {
            JOptionPane.showMessageDialog(this, "All the text fields should be filled!", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (!studentID.matches("[0-9]+") || !classID.matches("[0-9]+") || !amount.matches("[0-9]+")) {
            JOptionPane.showMessageDialog(this, "All the text fields should be numeric!", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (month.equals("Select") || year.equals("Select")) {
            JOptionPane.showMessageDialog(this, "Year and Month should be selected!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            int results = JOptionPane.showConfirmDialog(this, "Are you sure you want to record this payment? This cannot be undone.", "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (results == JOptionPane.YES_OPTION) {
                try {
                    ResultSet payments = MySQL.executeSearch("SELECT * FROM `invoice` WHERE `sno`='" + studentID + "' AND `month_id`='" + month + "' AND `classno`='" + classID + "' AND `year`='" + year + "'");
                    if (payments.next()) {
                        int option = JOptionPane.showConfirmDialog(this, "This payment is already recorded! Do you want to update it?", "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

                        if (option == JOptionPane.YES_OPTION) {
                            MySQL.executeIUD("UPDATE `invoice` SET `value` = '" + amount + "',`datetime`='" + todayDateTime() + "' "
                                    + "WHERE `sno`='" + studentID + "' AND `month_id`='" + month + "' AND `classno`='" + classID + "' AND `year`='" + year + "'");

                            JOptionPane.showMessageDialog(this, "Payment Id "+payments.getString("id")+" updated successfully", "Payment Updated", JOptionPane.INFORMATION_MESSAGE);
                        }

                    } else {

                        ResultSet enrolled = MySQL.executeSearch("SELECT * FROM `student_enrolment` WHERE `sno`='" + studentID + "' AND `classno`='" + classID + "'");
                        if (enrolled.next()) {
                            MySQL.executeIUD("INSERT INTO `invoice` (`sno`,`month_id`,`classno`,`year`,`value`,`datetime`) "
                                    + "VALUES ('" + studentID + "','" + month + "','" + classID + "','" + year + "','" + amount + "','" + todayDateTime() + "')");
                            loadPayments(ALLPAYMENTS);
                        } else {
                            JOptionPane.showMessageDialog(this, "This student is not enrolled in this class!", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

    }//GEN-LAST:event_jButton28ActionPerformed

    private void jTextField46KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField46KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField46KeyReleased

    private void jButton29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton29ActionPerformed

        if (jTable5.getSelectedRow() != -1 || jComboBox11.getSelectedIndex() != 0) {

            String studentId = null;
            String classNo = null;

            if (jTable5.getSelectedRow() != -1) {
                studentId = String.valueOf(jTable5.getValueAt(jTable5.getSelectedRow(), 0));
            }

            if (jComboBox11.getSelectedIndex() != 0) {
                classNo = String.valueOf(jComboBox11.getSelectedItem());
            }

            if (jTable5.getSelectedRow() != -1) {
                loadDueList(studentId, classNo, STUDENTDUELIST);
            } else {
                loadDueList(studentId, classNo, CLASSDUELIST);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Student or Class should be selected", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton29ActionPerformed

    private void jTextField47ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField47ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField47ActionPerformed

    private void jButton30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton30ActionPerformed

        if (jTable10.getSelectedRow() != -1) {
            String paymentId = String.valueOf(jTable10.getValueAt(jTable10.getSelectedRow(), 0));

            try {
                ResultSet resultset = MySQL.executeSearch("SELECT * FROM `invoice` INNER JOIN `student` ON `invoice`.`sno` = `student`.`sno` "
                        + "WHERE `invoice`.`id` = '" + paymentId + "'");

                if (resultset.next()) {
                    HashMap<String, Object> parameters = new HashMap<>();
                    parameters.put("Parameter1", resultset.getString("student.sno"));
                    parameters.put("Parameter2", resultset.getString("student.initials") + " " + resultset.getString("student.fname") + " " + resultset.getString("student.lname"));
                    parameters.put("Parameter3", resultset.getString("student.mobile"));
                    parameters.put("Parameter4", resultset.getString("invoice.datetime"));
                    parameters.put("Parameter5", resultset.getString("invoice.value"));
                    parameters.put("Parameter6", resultset.getString("invoice.month_id") + " " + resultset.getString("invoice.year"));
                    parameters.put("Parameter7", resultset.getString("invoice.value"));
                    parameters.put("Parameter8", resultset.getString("invoice.value"));

                    JREmptyDataSource datasource = new JREmptyDataSource();
                    JasperPrint report = JasperFillManager.fillReport("src/reports/Adyapana_invoice.jasper", parameters, datasource);
                    JasperViewer.viewReport(report);

                }

            } catch (Exception e) {
                e.printStackTrace();
            }

        } else {
            JOptionPane.showMessageDialog(this, "Please select the payment from the table", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton30ActionPerformed

    private void jTable10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable10MouseClicked

        if (jTable10.getSelectedRow() != -1) {
            jTextField39.setText(String.valueOf(jTable10.getValueAt(jTable10.getSelectedRow(), 1)));
            jTextField43.setText(String.valueOf(jTable10.getValueAt(jTable10.getSelectedRow(), 2)));
            jTextField46.setText(String.valueOf(jTable10.getValueAt(jTable10.getSelectedRow(), 5)));
            jComboBox23.setSelectedItem(monthMap.get(String.valueOf(jTable10.getValueAt(jTable10.getSelectedRow(), 3))));
            jComboBox24.setSelectedItem(String.valueOf(jTable10.getValueAt(jTable10.getSelectedRow(), 4)));
        }

    }//GEN-LAST:event_jTable10MouseClicked

    private void resetColours(int type) {
        if (type != 1) {
            studentLabel.setBackground(Color.decode(DARKCOLOUR));
        }
        if (type != 2) {
            teacherLabel.setBackground(Color.decode(DARKCOLOUR));
        }
        if (type != 3) {
            subjectLabel.setBackground(Color.decode(DARKCOLOUR));
        }
        if (type != 4) {
            classLabel.setBackground(Color.decode(DARKCOLOUR));
        }
    }

    private void loadStudents(String query, int table) {
        try {

            if (!query.contains(ACTIVE)) {
                if (query.contains("WHERE")) {
                    query += " AND " + ACTIVE;
                } else {
                    query += " WHERE " + ACTIVE;
                }
            }

            ResultSet results = MySQL.executeSearch(query);
            DefaultTableModel tableModel;
            if (table == VIEW) {
                tableModel = (DefaultTableModel) jTable5.getModel();
            } else {
                tableModel = (DefaultTableModel) jTable1.getModel();
            }
            tableModel.setRowCount(0);

            while (results.next()) {

                Vector<String> v = new Vector<>();
                v.add(results.getString("sno"));

                Student student = studentMap.get(results.getString("sno"));

                v.add(student.getFullName());
                v.add(student.getMobile());
                if (table == VIEW) {
                    v.add(student.getDateOfBirth());
                    v.add(student.getClassesCount());
                }

                tableModel.addRow(v);
            }
            if (table == VIEW) {
                jTable5.setModel(tableModel);
            } else {
                jTable1.setModel(tableModel);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadTeachers(String query, int table) {
        try {

            if (!query.contains(ACTIVE)) {
                if (query.contains("WHERE")) {
                    query += " AND " + ACTIVE;
                } else {
                    query += " WHERE " + ACTIVE;
                }
            }

            ResultSet results = MySQL.executeSearch(query);
            DefaultTableModel tableModel;
            if (table == VIEW) {
                tableModel = (DefaultTableModel) jTable6.getModel();
            } else {
                tableModel = (DefaultTableModel) jTable2.getModel();
            }
            tableModel.setRowCount(0);

            while (results.next()) {

                Vector<String> v = new Vector<>();
                v.add(results.getString("tno"));

                Teacher teacher = teacherMap.get(results.getString("tno"));

                v.add(teacher.getFullName());
                v.add(teacher.getMobile());

                if (table == VIEW) {
                    v.add(teacher.getClassesCount());
                    v.add(teacher.getSubjectCount());
                }

                tableModel.addRow(v);
            }
            if (table == VIEW) {
                jTable6.setModel(tableModel);
            } else {
                jTable2.setModel(tableModel);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadSubjects(String query, int table) {
        try {
            ResultSet results = MySQL.executeSearch(query);
            DefaultTableModel tableModel;
            if (table == VIEW) {
                tableModel = (DefaultTableModel) jTable7.getModel();
            } else {
                tableModel = (DefaultTableModel) jTable3.getModel();
            }
            tableModel.setRowCount(0);

            while (results.next()) {

                Vector<String> v = new Vector<>();
                v.add(results.getString("subno"));
                v.add(results.getString("description"));
                v.add(results.getString("price"));
                tableModel.addRow(v);
            }
            if (table == VIEW) {
                jTable7.setModel(tableModel);
            } else {
                jTable3.setModel(tableModel);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadClasses(String query, int table) {
        try {
            ResultSet results = MySQL.executeSearch(query);
            DefaultTableModel tableModel;
            if (table == VIEW) {
                tableModel = (DefaultTableModel) jTable8.getModel();
            } else {
                tableModel = (DefaultTableModel) jTable4.getModel();
            }
            tableModel.setRowCount(0);

            while (results.next()) {

                Vector<String> v = new Vector<>();
                v.add(results.getString("classno"));

                Classes classes = classMap.get(results.getString("classno"));
                Subject subject = subjectMap.get(classes.getSubjectID());

                v.add(subject.getName());
                v.add(classes.getTeacherID());
                v.add(classes.getTimeslot());

                String days = "";
                for (int x = 0; x < classes.getDayName().size(); x++) {
                    if (x == classes.getDayName().size() - 1) {
                        days += classes.getDayName().get(x);
                    } else {
                        days += classes.getDayName().get(x) + ",";
                    }
                }
                v.add(days);
                tableModel.addRow(v);
            }
            if (table == VIEW) {
                jTable8.setModel(tableModel);
            } else {
                jTable4.setModel(tableModel);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadCity() {
        try {
            ResultSet cities = MySQL.executeSearch("SELECT * FROM `city`");

            Vector<String> v = new Vector<>();
            v.add("Select");

            while (cities.next()) {
                v.add(cities.getString("name"));
                cityMap.put(cities.getString("name"), cities.getString("id"));
            }

            DefaultComboBoxModel model = new DefaultComboBoxModel(v);
            jComboBox1.setModel(model);
            jComboBox3.setModel(model);
            jComboBox9.setModel(model);
            jComboBox14.setModel(model);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadDistrict() {
        try {
            ResultSet districts = MySQL.executeSearch("SELECT * FROM `district`");

            Vector<String> v = new Vector<>();
            v.add("Select");

            while (districts.next()) {
                v.add(districts.getString("name"));
                districtMap.put(districts.getString("name"), districts.getString("id"));
            }

            DefaultComboBoxModel model = new DefaultComboBoxModel(v);
            jComboBox2.setModel(model);
            jComboBox4.setModel(model);
            jComboBox10.setModel(model);
            jComboBox15.setModel(model);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadClassComboBoxes() {
        try {
            //Subjects combobox
            ResultSet subjects = MySQL.executeSearch(ALLSUBJECTS);
            Vector<String> vSubject = new Vector<>();
            vSubject.add("Select");
            subjectListMap.put("Select", "Select");
            while (subjects.next()) {
                subjectListMap.put(subjects.getString("description"), subjects.getString("subno"));
                vSubject.add(subjects.getString("description"));
            }
            DefaultComboBoxModel modelSubject = new DefaultComboBoxModel(vSubject);
            jComboBox16.setModel(modelSubject);
            jComboBox5.setModel(modelSubject);

            //Teacher combobox
            ResultSet teachers = MySQL.executeSearch(ALLTEACHERS);
            Vector<String> vTeacher = new Vector<>();
            vTeacher.add("Select");
            while (teachers.next()) {
                teacherListMap.put(teachers.getString("initials") + " " + teachers.getString("fname") + " " + teachers.getString("lname"), teachers.getString("tno"));
                vTeacher.add(teachers.getString("initials") + " " + teachers.getString("fname") + " " + teachers.getString("lname"));
            }
            DefaultComboBoxModel modelTeacher = new DefaultComboBoxModel(vTeacher);
            jComboBox17.setModel(modelTeacher);
            jComboBox6.setModel(modelTeacher);

            //Timeslot combobox
            ResultSet time = MySQL.executeSearch("SELECT * FROM `timeslot`");
            Vector<String> vTime = new Vector<>();
            vTime.add("Select");
            while (time.next()) {
                vTime.add(time.getString("time_from") + " to " + time.getString("time_to"));
                timeslotMap.put(time.getString("time_from") + " to " + time.getString("time_to"), time.getString("id"));
            }
            DefaultComboBoxModel modelTime = new DefaultComboBoxModel(vTime);
            jComboBox18.setModel(modelTime);
            jComboBox7.setModel(modelTime);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadStudentEnrolments(String query) {
        try {
            ResultSet results = MySQL.executeSearch(query);
            DefaultTableModel model = (DefaultTableModel) jTable9.getModel();
            model.setRowCount(0);
            while (results.next()) {
                Vector v = new Vector();
                v.add(results.getString("id"));
                v.add(results.getString("sno"));
                v.add(results.getString("classno"));
                model.addRow(v);
            }
            jTable9.setModel(model);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadPayments(String query) {
        try {
            ResultSet results = MySQL.executeSearch(query);
            DefaultTableModel model = (DefaultTableModel) jTable10.getModel();
            model.setRowCount(0);
            while (results.next()) {
                Vector v = new Vector();
                v.add(results.getString("id"));
                v.add(results.getString("sno"));
                v.add(results.getString("classno"));
                v.add(results.getString("month_id"));
                v.add(results.getString("year"));
                v.add(results.getString("value"));
                model.addRow(v);
            }
            jTable10.setModel(model);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void storeAllStudents() {
        studentMap.clear();
        try {
            ResultSet students = MySQL.executeSearch(ALLSTUDENTS + " INNER JOIN `address` ON `student`.`address_id`=`address`.`id` "
                    + "INNER JOIN `city` ON `address`.`city_id`=`city`.`id` "
                    + "INNER JOIN `district` ON `address`.`district_id`=`district`.`id` "
                    + "WHERE `student`." + ACTIVE);
            while (students.next()) {
                Student student = new Student();
                student.setInitials(students.getString("initials"));
                student.setFirstName(students.getString("fname"));
                student.setLastName(students.getString("lname"));
                student.setMobile(students.getString("mobile"));
                student.setDateOfBirth(students.getString("dob"));
                student.setEmail(students.getString("email"));
                student.setJoinedDate(students.getString("joined_date"));
                student.setAddressID(students.getString("address_id"));
                student.setLine1(students.getString("line1"));
                student.setLine2(students.getString("line2"));
                student.setCityName(students.getString("city.name"));
                student.setDistrictName(students.getString("district.name"));

                ResultSet classesCount = MySQL.executeSearch("SELECT COUNT(*) FROM `student_enrolment` WHERE `sno` = '" + students.getString("sno") + "'");
                classesCount.next();
                student.setClassesCount(classesCount.getString("COUNT(*)"));

                studentMap.put(students.getString("sno"), student);

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void storeAllTeachers() {
        teacherMap.clear();
        try {
            ResultSet teachers = MySQL.executeSearch(ALLTEACHERS + " INNER JOIN `address` ON `teacher`.`address_id`=`address`.`id` "
                    + "INNER JOIN `city` ON `address`.`city_id`=`city`.`id` "
                    + "INNER JOIN `district` ON `address`.`district_id`=`district`.`id`");
            while (teachers.next()) {
                Teacher teacher = new Teacher();
                teacher.setInitials(teachers.getString("initials"));
                teacher.setFirstName(teachers.getString("fname"));
                teacher.setLastName(teachers.getString("lname"));
                teacher.setMobile(teachers.getString("mobile"));
                teacher.setEmail(teachers.getString("email"));
                teacher.setJoinedDate(teachers.getString("joined_date"));
                teacher.setAddressID(teachers.getString("address_id"));
                teacher.setLine1(teachers.getString("line1"));
                teacher.setLine2(teachers.getString("line2"));
                teacher.setCityName(teachers.getString("city.name"));
                teacher.setDistrictName(teachers.getString("district.name"));

                ResultSet classesCount = MySQL.executeSearch("SELECT COUNT(*) AS classCount FROM `class` WHERE `tno` = '" + teachers.getString("tno") + "'");
                classesCount.next();
                teacher.setClassesCount(classesCount.getString("classCount"));

                ResultSet subjectsCount = MySQL.executeSearch("SELECT COUNT(DISTINCT subno) AS subjectCount FROM `class` WHERE `tno` = '" + teachers.getString("tno") + "'");
                subjectsCount.next();
                teacher.setSubjectCount(subjectsCount.getString("subjectCount"));

                teacherMap.put(teachers.getString("tno"), teacher);

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void storeAllSubjects() {
        subjectMap.clear();

        try {
            ResultSet subjects = MySQL.executeSearch(ALLSUBJECTS);
            while (subjects.next()) {
                Subject subject = new Subject();
                subject.setName(subjects.getString("description"));
                subject.setPrice(subjects.getString("price"));

                subjectMap.put(subjects.getString("subno"), subject);

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void storeAllClasses() {
        classMap.clear();

        try {
            ResultSet allClasses = MySQL.executeSearch(ALLCLASSES + " INNER JOIN `timeslot` ON `class`.`timeslot_id` = `timeslot`.`id`");
            while (allClasses.next()) {
                Classes classes = new Classes();
                classes.setSubjectID(allClasses.getString("subno"));
                classes.setTeacherID(allClasses.getString("tno"));
                classes.setTimeslotID(allClasses.getString("timeslot_id"));
                classes.setDate_added(allClasses.getString("date_added"));
                classes.setTimeslot(allClasses.getString("time_from") + " to " + allClasses.getString("time_to"));

                Vector v = new Vector();
                ResultSet days = MySQL.executeSearch("SELECT * FROM `class_has_day` "
                        + "INNER JOIN `day` ON `class_has_day`.`day_id`=`day`.`id` WHERE `class_classno` = '" + allClasses.getString("classno") + "'");

                while (days.next()) {
                    v.add(days.getString("day_name"));
                }
                classes.setDayName(v);
                classMap.put(allClasses.getString("classno"), classes);

            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void filterStudent() {
        String query = ALLSTUDENTS + " LEFT JOIN `student_enrolment` ON `student`.`sno`=`student_enrolment`.`sno` "
                + "LEFT JOIN `invoice` ON `student`.`sno`=`invoice`.`sno` WHERE `student`." + ACTIVE;
        String name = jTextField33.getText();
        String classes = String.valueOf(jComboBox11.getSelectedItem());

        if (name.equals("") && classes.equals("Select")) {
            query = ALLSTUDENTS + " WHERE `student`." + ACTIVE;
        } else {

            if (!name.equals("")) {
                query += " AND (`initials` LIKE '" + name + "%' OR `fname` LIKE '" + name + "%' OR `lname` LIKE '" + name + "%')";
            }
            if (!classes.equals("Select")) {
                query += " AND `student_enrolment`.`classno` = '" + classes + "'";
            }
        }
        loadStudents(query, VIEW);
    }

    private void loadStudentFilters() {
        try {
            ResultSet classes = MySQL.executeSearch(ALLCLASSES);
            Vector vClasses = new Vector();
            vClasses.add("Select");
            while (classes.next()) {
                vClasses.add(classes.getString("classno"));
            }
            DefaultComboBoxModel modelClasses = new DefaultComboBoxModel(vClasses);
            jComboBox11.setModel(modelClasses);

            ResultSet months = MySQL.executeSearch("SELECT * FROM `month`");
            Vector vMonths = new Vector();
            vMonths.add("Select");
            monthMap.put("Select", "Select");
            while (months.next()) {
                vMonths.add(months.getString("name"));
                monthMap.put(months.getString("name"), months.getString("id"));
            }
            DefaultComboBoxModel modelMonths = new DefaultComboBoxModel(vMonths);
            jComboBox23.setModel(modelMonths);

            int thisYear = Year.now().getValue();
            int oldestYear = thisYear - 5;
            Vector vYears = new Vector();
            vYears.add("Select");
            for (int x = thisYear; x >= oldestYear; x--) {
                vYears.add(x);
            }
            DefaultComboBoxModel modelYears = new DefaultComboBoxModel(vYears);
            jComboBox24.setModel(modelYears);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void filterTeacher() {
        String query = ALLTEACHERS + " LEFT JOIN `class` ON `teacher`.`tno`=`class`.`tno` WHERE `teacher`." + ACTIVE;
        String name = jTextField34.getText();
        String subject = subjectListMap.get(String.valueOf(jComboBox12.getSelectedItem()));

        if (name.equals("") && subject.equals("Select")) {
            query = ALLTEACHERS + " WHERE `teacher`." + ACTIVE;
        } else {
            if (!name.equals("")) {
                query += " AND (`initials` LIKE '" + name + "%' OR `fname` LIKE '" + name + "%' OR `lname` LIKE '" + name + "%')";
            }
            if (!subject.equals("Select")) {
                query += " AND `subno` = '" + subject + "'";
            }
        }
        loadTeachers(query, VIEW);
    }

    private void loadTeacherClassFilters() {
        try {
            ResultSet subjects = MySQL.executeSearch(ALLSUBJECTS);
            Vector vSubjects = new Vector();
            vSubjects.add("Select");
            while (subjects.next()) {
                vSubjects.add(subjects.getString("description"));
            }
            DefaultComboBoxModel modelSubject = new DefaultComboBoxModel(vSubjects);
            jComboBox12.setModel(modelSubject);
            jComboBox21.setModel(modelSubject);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void filterClass() {
        String query = ALLCLASSES + " INNER JOIN `subject` ON `class`.`subno`=`subject`.`subno` WHERE `class`." + ACTIVE;
        String classID = jTextField40.getText();
        String teacherID = jTextField42.getText();
        String subject = subjectListMap.get(String.valueOf(jComboBox21.getSelectedItem()));

        if (classID.equals("") && teacherID.equals("") && subject.equals("Select")) {
            query = ALLCLASSES + " WHERE `class`." + ACTIVE;
        } else {
            if (!classID.equals("")) {
                query += " AND `classno` = '" + classID + "'";
            }
            if (!teacherID.equals("")) {
                query += " AND `tno` = '" + teacherID + "'";
            }
            if (!subject.equals("Select")) {
                query += " AND `class`.`subno` = '" + subject + "'";
            }
        }
        loadClasses(query, VIEW);
    }

    private void loadDueList(String studentId, String classNo, String type) {

        DueListByStudent dueListStudent = new DueListByStudent(this, true);
        DueListByClass dueListClass = new DueListByClass(this, true);

        try {

            String query = "SELECT * FROM student "
                    + "INNER JOIN `student_enrolment` ON `student`.`sno`=`student_enrolment`.`sno` "
                    + "INNER JOIN `class` ON `student_enrolment`.`classno` = `class`.`classno` "
                    + "INNER JOIN `subject` ON `class`.`subno` = `subject`.`subno` "
                    + "LEFT JOIN `invoice` ON `student_enrolment`.`sno` = `invoice`.`sno` AND `student_enrolment`.`classno` = `invoice`.`classno` "
                    + "WHERE";

            if (studentId != null) {
                query += " `student`.`sno` = '" + studentId + "' AND";
            }

            if (classNo != null) {
                query += " `student_enrolment`.`classno` = '" + classNo + "'";
            }

            if (query.endsWith("AND")) {
                query = query.replace("`student`.`sno` = '" + studentId + "' AND", "`student`.`sno` = '" + studentId + "'");
            }

            ResultSet resultSet = MySQL.executeSearch(query);

            if (isMyResultSetEmpty(resultSet)) {
                JOptionPane.showMessageDialog(this, "This student is not registered in this class", "Error", JOptionPane.ERROR_MESSAGE);
                this.dispose();
            }

            while (resultSet.next()) {

                if (type == STUDENTDUELIST) {
                    dueListStudent.getjTextField1().setText(resultSet.getString("student.sno"));
                    dueListStudent.getjTextField2().setText(resultSet.getString("student.fname") + " " + resultSet.getString("student.lname"));
                    dueListStudent.getjTextField3().setText(resultSet.getString("student.mobile"));
                } else {
                    dueListClass.getjTextField1().setText(resultSet.getString("class.classno"));
                    dueListClass.getjTextField2().setText(resultSet.getString("subject.description"));
                }

                String enrollmentID = resultSet.getString("student_enrolment.id");

                if (lastPaidMap.get(enrollmentID) == null) {

                    Vector<String> vector = new Vector<>();
                    vector.add(resultSet.getString("invoice.month_id"));
                    vector.add(resultSet.getString("invoice.year"));

                    if (type == STUDENTDUELIST) {
                        vector.add(resultSet.getString("class.classno"));
                        vector.add(resultSet.getString("subject.description"));
                    } else {
                        vector.add(resultSet.getString("student.sno"));
                        vector.add(resultSet.getString("student.fname") + " " + resultSet.getString("student.lname"));
                    }

                    vector.add(resultSet.getString("student_enrolment.date"));
                    vector.add(resultSet.getString("invoice.datetime"));

                    lastPaidMap.put(enrollmentID, vector);
                } else {
                    Vector<String> existingVector = lastPaidMap.get(enrollmentID);
                    Vector<String> newVector = new Vector<>();

                    if (existingVector.get(0) != null && existingVector.get(1) != null && existingVector.get(0) != "null" && existingVector.get(1) == "null") {

                        if (resultSet.getInt("year") > Integer.parseInt(existingVector.get(1))) {

                            newVector.add(resultSet.getString("invoice.month_id"));
                            newVector.add(resultSet.getString("invoice.year"));
                            newVector.add(resultSet.getString("class.classno"));
                            newVector.add(resultSet.getString("subject.description"));
                            newVector.add(resultSet.getString("student_enrolment.date"));
                            newVector.add(resultSet.getString("invoice.datetime"));
                            lastPaidMap.put(enrollmentID, newVector);

                        } else if (resultSet.getInt("year") == Integer.parseInt(existingVector.get(1))) {
                            if (resultSet.getInt("month_id") > Integer.parseInt(existingVector.get(0))) {

                                newVector.add(resultSet.getString("invoice.month_id"));
                                newVector.add(resultSet.getString("invoice.year"));
                                newVector.add(resultSet.getString("class.classno"));
                                newVector.add(resultSet.getString("subject.description"));
                                newVector.add(resultSet.getString("student_enrolment.date"));
                                newVector.add(resultSet.getString("invoice.datetime"));
                                lastPaidMap.put(enrollmentID, newVector);

                            }
                        }
                    }
                }
            }

            DefaultTableModel model;

            if (type == STUDENTDUELIST) {
                model = (DefaultTableModel) dueListStudent.getjTable1().getModel();
            } else {
                model = (DefaultTableModel) dueListClass.getjTable1().getModel();
            }

            model.setRowCount(0);

            for (Vector vector : lastPaidMap.values()) {

                int numberOfMonths = 0;
                String[] splits = String.valueOf(vector.get(4)).split("-", 3);
                String lastPaidMonth = String.valueOf(vector.get(0));
                String lastPaidYear = String.valueOf(vector.get(1));

                if (lastPaidMonth == "null" || lastPaidYear == "null" || lastPaidMonth == null || lastPaidYear == null) {
                    numberOfMonths = Integer.parseInt(Home.month()) - Integer.parseInt(splits[1]);
                } else if (Integer.parseInt(lastPaidYear) == Integer.parseInt(Home.year())) {
                    numberOfMonths = Integer.parseInt(Home.month()) - Integer.parseInt(lastPaidMonth) - 1;
                } else if (Integer.parseInt(lastPaidYear) < Integer.parseInt(Home.year())) {
                    numberOfMonths = 12 - Integer.parseInt(lastPaidMonth) + ((Integer.parseInt(Home.year()) - Integer.parseInt(lastPaidYear) - 1) * 12) + Integer.parseInt(Home.month()) - 1;
                }

                Vector<String> tableVector = new Vector<>();
                tableVector.add(String.valueOf(vector.get(2)));
                tableVector.add(String.valueOf(vector.get(3)));
                tableVector.add(String.valueOf(numberOfMonths));

                if (vector.get(5) == null) {
                    tableVector.add(String.valueOf(vector.get(4)));
                } else {
                    tableVector.add(String.valueOf(vector.get(5)));
                }

                model.addRow(tableVector);
            }

            if (type == STUDENTDUELIST) {
                dueListStudent.getjTable1().setModel(model);
                dueListStudent.setVisible(true);
            } else {
                dueListClass.getjTable1().setModel(model);
                dueListClass.setVisible(true);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void markAttendance(String status) {

        String studentId = jTextField44.getText();
        String classId = jTextField45.getText();
        String date = jTextField47.getText();

        if (studentId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill the student ID", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (classId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill the class ID", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (date.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill the date", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (!studentId.matches("[0-9]+")) {
            JOptionPane.showMessageDialog(this, "Please enter a valid student ID", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (!classId.matches("[0-9]+")) {
            JOptionPane.showMessageDialog(this, "Please enter a valid class ID", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (!date.matches("((?:19|20)[0-9][0-9])-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])")) {
            JOptionPane.showMessageDialog(this, "Date invalid (Format : 2000-01-01)", "Error", JOptionPane.ERROR_MESSAGE);
        } else {

            try {

                ResultSet student = MySQL.executeSearch("SELECT * FROM `student` WHERE `sno` = '" + studentId + "'");
                ResultSet classes = MySQL.executeSearch("SELECT * FROM `class` WHERE `classno` = '" + classId + "'");
                Boolean validStudent = false;
                Boolean validClass = false;

                if (student.next()) {
                    validStudent = true;

                    if (classes.next()) {
                        validClass = true;
                    } else {
                        validClass = false;
                        JOptionPane.showMessageDialog(this, "Invalid Class ID!", "Error", JOptionPane.ERROR_MESSAGE);
                    }

                } else {
                    validStudent = false;
                    JOptionPane.showMessageDialog(this, "Invalid Student ID!", "Error", JOptionPane.ERROR_MESSAGE);
                }

                if (validStudent && validClass) {
                    ResultSet result = MySQL.executeSearch("SELECT * FROM `attendance` "
                            + "WHERE `sno` = '" + studentId + "' AND `classno` = '" + classId + "' AND `date` = '" + date + "'");

                    if (result.next()) {
                        MySQL.executeIUD("UPDATE `attendance` SET `attended` = '" + status + "' "
                                + "WHERE `sno` = '" + studentId + "' AND `classno` = '" + classId + "' AND `date` = '" + date + "'");
                    } else {
                        MySQL.executeIUD("INSERT INTO `attendance` (`sno`,`classno`,`date`,`attended`) VALUES('" + studentId + "','" + classId + "','" + date + "','" + status + "')");
                    }

                    loadAttendance();
                    jTextField44.setText("");
                    jTextField45.setText("");
                    jTextField47.setText("");

                } else {
                    JOptionPane.showMessageDialog(this, "Student ID or Class ID is invalid!", "Error", JOptionPane.ERROR_MESSAGE);
                }

            } catch (Exception e) {
                e.printStackTrace();
            }

        }
    }

    private void loadAttendance() {
        DefaultTableModel model = (DefaultTableModel) jTable11.getModel();
        model.setRowCount(0);

        try {
            ResultSet resultset = MySQL.executeSearch("SELECT * FROM `attendance`");

            while (resultset.next()) {
                Vector<String> vector = new Vector<>();
                vector.add(resultset.getString("sno"));
                vector.add(resultset.getString("classno"));

                if (resultset.getString("attended") == PRESENT) {
                    vector.add("Present");
                } else {
                    vector.add("Absent");
                }

                vector.add(resultset.getString("date"));
                model.addRow(vector);
            }
            jTable11.setModel(model);

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public static String todayDate() {
        return new SimpleDateFormat("yyyy/MM/dd").format(new Date());
    }

    public static String todayDateTime() {
        return new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").format(new Date());
    }

    public static String year() {
        return new SimpleDateFormat("yyyy").format(new Date());
    }

    public static String month() {
        return new SimpleDateFormat("MM").format(new Date());
    }

    public static boolean isMyResultSetEmpty(ResultSet rs) throws SQLException {
        return (!rs.isBeforeFirst() && rs.getRow() == 0);
    }

    private void resetFields(int number) {
        if (number == studentDetails) {
            jTextField22.setText("");
            jTextField16.setText("");
            jTextField17.setText("");
            jTextField18.setText("");
            jTextField19.setText("");
            jTextField41.setText("");
            jTextField20.setText("");
            jTextField21.setText("");
            jComboBox9.setSelectedIndex(0);
            jComboBox10.setSelectedIndex(0);
            jLabel89.setText(" ");
        } else if (number == studentFilters) {
            jTextField33.setText("");
            jComboBox11.setSelectedIndex(0);
        } else if (number == teacherDetails) {
            jTextField25.setText("");
            jTextField26.setText("");
            jTextField27.setText("");
            jTextField29.setText("");
            jTextField30.setText("");
            jTextField31.setText("");
            jTextField32.setText("");
            jComboBox14.setSelectedIndex(0);
            jComboBox15.setSelectedIndex(0);
            jLabel91.setText(" ");
        } else if (number == teacherFilters) {
            jTextField34.setText("");
            jComboBox12.setSelectedIndex(0);
        } else if (number == subjectDetails) {
            jTextField35.setText("");
            jTextField36.setText("");
        } else if (number == classDetails) {
            jComboBox16.setSelectedIndex(0);
            jComboBox17.setSelectedIndex(0);
            jComboBox18.setSelectedIndex(0);
            jCheckBox8.setSelected(false);
            jCheckBox9.setSelected(false);
            jCheckBox10.setSelected(false);
            jCheckBox11.setSelected(false);
            jCheckBox12.setSelected(false);
            jCheckBox13.setSelected(false);
            jCheckBox14.setSelected(false);
        } else if (number == classFilters) {
            jTextField40.setText("");
            jTextField42.setText("");
            jComboBox21.setSelectedIndex(0);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        FlatDarkLaf.setup();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel attendancePanel;
    private javax.swing.JLabel classLabel;
    private javax.swing.JPanel classRegistrationPanel;
    private javax.swing.JPanel classesPanel;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton28;
    private javax.swing.JButton jButton29;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton30;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox10;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox12;
    private javax.swing.JCheckBox jCheckBox13;
    private javax.swing.JCheckBox jCheckBox14;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JCheckBox jCheckBox9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox10;
    private javax.swing.JComboBox<String> jComboBox11;
    private javax.swing.JComboBox<String> jComboBox12;
    private javax.swing.JComboBox<String> jComboBox14;
    private javax.swing.JComboBox<String> jComboBox15;
    private javax.swing.JComboBox<String> jComboBox16;
    private javax.swing.JComboBox<String> jComboBox17;
    private javax.swing.JComboBox<String> jComboBox18;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox21;
    private javax.swing.JComboBox<String> jComboBox23;
    private javax.swing.JComboBox<String> jComboBox24;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JComboBox<String> jComboBox5;
    private javax.swing.JComboBox<String> jComboBox6;
    private javax.swing.JComboBox<String> jComboBox7;
    private javax.swing.JComboBox<String> jComboBox9;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel100;
    private javax.swing.JLabel jLabel101;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JLabel jLabel87;
    private javax.swing.JLabel jLabel88;
    private javax.swing.JLabel jLabel89;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel90;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JLabel jLabel93;
    private javax.swing.JLabel jLabel94;
    private javax.swing.JLabel jLabel95;
    private javax.swing.JLabel jLabel96;
    private javax.swing.JLabel jLabel97;
    private javax.swing.JLabel jLabel98;
    private javax.swing.JLabel jLabel99;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable10;
    private javax.swing.JTable jTable11;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTable jTable6;
    private javax.swing.JTable jTable7;
    private javax.swing.JTable jTable8;
    private javax.swing.JTable jTable9;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField16;
    private javax.swing.JTextField jTextField17;
    private javax.swing.JTextField jTextField18;
    private javax.swing.JTextField jTextField19;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField20;
    private javax.swing.JTextField jTextField21;
    private javax.swing.JTextField jTextField22;
    private javax.swing.JTextField jTextField23;
    private javax.swing.JTextField jTextField24;
    private javax.swing.JTextField jTextField25;
    private javax.swing.JTextField jTextField26;
    private javax.swing.JTextField jTextField27;
    private javax.swing.JTextField jTextField28;
    private javax.swing.JTextField jTextField29;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField30;
    private javax.swing.JTextField jTextField31;
    private javax.swing.JTextField jTextField32;
    private javax.swing.JTextField jTextField33;
    private javax.swing.JTextField jTextField34;
    private javax.swing.JTextField jTextField35;
    private javax.swing.JTextField jTextField36;
    private javax.swing.JTextField jTextField37;
    private javax.swing.JTextField jTextField38;
    private javax.swing.JTextField jTextField39;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField40;
    private javax.swing.JTextField jTextField41;
    private javax.swing.JTextField jTextField42;
    private javax.swing.JTextField jTextField43;
    private javax.swing.JTextField jTextField44;
    private javax.swing.JTextField jTextField45;
    private javax.swing.JTextField jTextField46;
    private javax.swing.JTextField jTextField47;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JPanel paymentPanel;
    private javax.swing.JPanel studentEnrollmentPanel;
    private javax.swing.JLabel studentLabel;
    private javax.swing.JPanel studentRegistrationPanel;
    private javax.swing.JPanel studentsPanel;
    private javax.swing.JLabel subjectLabel;
    private javax.swing.JPanel subjectRegistrationPanel;
    private javax.swing.JPanel subjectsPanel;
    private javax.swing.JLabel teacherLabel;
    private javax.swing.JPanel teacherRegistrationPanel;
    private javax.swing.JPanel teachersPanel;
    private javax.swing.JPanel viewPanel;
    // End of variables declaration//GEN-END:variables
}
